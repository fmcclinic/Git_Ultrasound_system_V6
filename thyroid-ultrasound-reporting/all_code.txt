
code của thyroid-report.html


<!DOCTYPE html>
<html lang="vi"> <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thyroid Ultrasound Report / Báo cáo Siêu âm Tuyến Giáp</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <div class="container">
        <h1>Ultrasound Reporting System / Hệ thống tạo báo cáo Siêu âm</h1>

        <div class="tab-container">
            <div class="tab-nav">
                <button class="tab-button active" data-tab="patient-info">Patient Info / Thông tin BN</button>
                <button class="tab-button" data-tab="thyroid-assessment">Thyroid Assessment / Đánh giá Tuyến Giáp</button>
                <button class="tab-button" data-tab="images">Images / Hình ảnh</button>
                <button class="tab-button" data-tab="templates">Templates / Mẫu</button>
                <button class="tab-button" data-tab="report">Report / Báo cáo</button>
            </div>

            <div class="tab-content active" id="patient-info">
                <h2>Patient Information / Thông tin Bệnh nhân</h2>
                <form id="patient-info-form">
                    <div class="form-group">
                        <label for="patient-name">Họ và Tên / Full Name:</label>
                        <input type="text" id="patient-name" name="patientName" required>
                    </div>
                    <div class="form-group">
                        <label for="patient-id">Mã BN / Patient ID:</label>
                        <input type="text" id="patient-id" name="patientId" required>
                    </div>
                     <div class="form-group">
                        <label for="patient-dob">Ngày sinh / Date of Birth:</label>
                        <input type="date" id="patient-dob" name="patientDob">
                    </div>
                     <div class="form-group">
                        <label for="requesting-physician">Bác sĩ chỉ định / Requesting Physician:</label>
                        <input type="text" id="requesting-physician" name="requestingPhysician">
                    </div>
                     <div class="form-group">
                        <label for="exam-date">Ngày siêu âm / Exam Date:</label>
                        <input type="date" id="exam-date" name="examDate" value=""> </div>
                        <div class="form-group">
                            <label for="reason">Reason for Exam / Clinical Info / Lý do khám / LS:</label>
                            <input type="text" id="reason" name="reason" list="reason-suggestions" placeholder="Enter reason or select from list... / Nhập lý do hoặc chọn từ danh sách...">
                            <datalist id="reason-suggestions">
                                <option value="Thyroid nodule evaluation / Đánh giá nhân giáp"></option>
                                <option value="Goiter evaluation / Đánh giá bướu giáp"></option>
                                <option value="Abnormal thyroid function tests / Xét nghiệm chức năng tuyến giáp bất thường"></option>
                                <option value="Neck swelling / Sưng vùng cổ"></option>
                                <option value="Neck pain / Đau vùng cổ"></option>
                                <option value="Follow-up of known nodule(s) / Theo dõi nhân giáp đã biết"></option>
                                <option value="Follow-up of known goiter / Theo dõi bướu giáp đã biết"></option>
                                <option value="Screening (e.g., family history) / Tầm soát (ví dụ: tiền sử gia đình)"></option>
                                <option value="Symptoms of hyperthyroidism / Triệu chứng cường giáp"></option>
                                <option value="Symptoms of hypothyroidism / Triệu chứng suy giáp"></option>
                                <option value="Difficulty swallowing (Dysphagia) / Khó nuốt"></option>
                                <option value="Difficulty breathing (Dyspnea) / Khó thở"></option>
                                <option value="Voice change (Dysphonia) / Khàn tiếng"></option>
                                <option value="Palpable neck mass / Sờ thấy khối vùng cổ"></option>
                                <option value="Post-thyroidectomy follow-up / Theo dõi sau phẫu thuật tuyến giáp"></option>
                                <option value="Pre-operative evaluation / Đánh giá trước phẫu thuật"></option>
                            </datalist>
                        </div>
                </form>
            </div>

            <div class="tab-content" id="thyroid-assessment">
                <h2>Thyroid Assessment / Đánh giá Tuyến Giáp</h2>
                <form id="thyroid-form">
                    <div class="section">
                        <h3 class="section-toggle">General Findings / Tổng quát</h3>
                        <div class="section-content">
                            <div class="form-group">
                                <label for="thyroid-size">Overall Size / Kích thước chung:</label>
                                <input type="text" id="thyroid-size" name="overallSize" list="size-suggestions" placeholder="e.g., Normal / Bình thường, Enlarged / To...">
                                <datalist id="size-suggestions">
                                    <option value="Normal size / Kích thước bình thường"></option>
                                    <option value="Mildly enlarged / To nhẹ"></option>
                                    <option value="Moderately enlarged / To vừa"></option>
                                    <option value="Markedly enlarged / Rất to"></option>
                                    <option value="Diffusely enlarged / To lan tỏa"></option>
                                    <option value="Atrophic / Teo nhỏ"></option>
                                </datalist>
                            </div>
                            <div class="form-group">
                                <label for="thyroid-echotexture">Echotexture / Cấu trúc hồi âm:</label>
                                <input type="text" id="thyroid-echotexture" name="echotexture" list="echotexture-suggestions" placeholder="e.g., Homogeneous / Đồng nhất, Heterogeneous / Không đồng nhất...">
                                <datalist id="echotexture-suggestions">
                                    <option value="Homogeneous / Đồng nhất"></option>
                                    <option value="Mildly heterogeneous / Không đồng nhất nhẹ"></option>
                                    <option value="Moderately heterogeneous / Không đồng nhất vừa"></option>
                                    <option value="Markedly heterogeneous / Không đồng nhất rõ rệt"></option>
                                    <option value="Diffusely heterogeneous / Không đồng nhất lan tỏa"></option>
                                    <option value="Coarse / Thô"></option>
                                    <option value="Micronodulation pattern / Dạng vi hạt (Hashimoto)"></option>
                                    <option value="With fibrous septations / Có vách xơ"></option>
                                </datalist>
                            </div>
                            <div class="form-group">
                                <label for="thyroid-vascularity">Vascularity (Doppler) / Tưới máu:</label>
                                <input type="text" id="thyroid-vascularity" name="vascularity" list="vascularity-suggestions" placeholder="e.g., Normal / Bình thường...">
                                <datalist id="vascularity-suggestions">
                                    <option value="Normal / Bình thường"></option>
                                    <option value="Mildly increased / Tăng nhẹ"></option>
                                    <option value="Moderately increased / Tăng vừa"></option>
                                    <option value="Markedly Increased (Thyroid Inferno) / Rất tăng (Thyroid Inferno)"></option>
                                    <option value="Decreased / Giảm"></option>
                                    <option value="Not assessed / Không đánh giá"></option>
                                </datalist>
                            </div>
                        </div>
                    </div>

                    <div class="section">
                         <h3 class="section-toggle">Right Lobe / Thùy Phải</h3>
                         <div class="section-content">
                            <div class="form-group dimension-group">
                                <label>Dimensions (mm) / Kích thước (mm):</label>
                                <input type="number" step="0.1" class="dimension" id="right-lobe-d1" name="rightLobeD1" placeholder="Width / Ngang" data-lobe="right" title="Ngang"> <span class="normal-range-text">(N: 13-18)</span> x
                                <input type="number" step="0.1" class="dimension" id="right-lobe-d2" name="rightLobeD2" placeholder="AP / Trước-Sau" data-lobe="right" title="Trước-Sau"> <span class="normal-range-text">(N: 13-18)</span> x
                                <input type="number" step="0.1" class="dimension" id="right-lobe-d3" name="rightLobeD3" placeholder="Length / Dọc" data-lobe="right" title="Dọc"> <span class="normal-range-text">(N: 40-60)</span>
                                <br>
                                <span class="volume-display">Volume / Thể tích: <span id="right-lobe-volume">0</span> mL</span> <span class="normal-range-text">(Nữ/Female: &lt; 18mL, Nam/Male: &lt; 25mL)</span> <input type="hidden" name="rightLobeVolume" id="right-lobe-volume-hidden">
                            </div>
                             <div class="form-group">
                                <label for="right-lobe-findings">Findings / Parenchyma / Mô tả / Chủ mô:</label>
                                <textarea id="right-lobe-findings" name="rightLobeFindings" rows="3" placeholder="Describe parenchyma, presence of lesions... / Mô tả chủ mô, sự hiện diện của tổn thương..."></textarea>
                                <div class="suggestion-button-container">
                                    <button type="button" class="suggestion-btn" data-insert="Normal parenchymal echotexture and vascularity. No focal lesion identified. / Chủ mô cấu trúc âm và tưới máu bình thường. Không thấy tổn thương khu trú.">Chủ mô BT</button>
                                    <button type="button" class="suggestion-btn" data-insert="Diffusely heterogeneous echotexture. / Cấu trúc âm không đồng nhất lan tỏa.">Không đồng nhất</button>
                                    <button type="button" class="suggestion-btn" data-insert="Coarse parenchymal echotexture. / Cấu trúc nhu mô thô.">Cấu trúc thô</button>
                                    <button type="button" class="suggestion-btn" data-insert="Areas of cystic degeneration noted. / Ghi nhận các vùng thoái hóa nang.">Thoái hóa nang</button>
                                    <button type="button" class="suggestion-btn" data-insert="Prominent fibrous septations noted. / Ghi nhận các vách xơ rõ.">Có vách xơ</button>
                                    <button type="button" class="suggestion-btn" data-insert="Contains multiple nodules (described below). / Chứa nhiều nhân (mô tả bên dưới).">Có nhiều nhân</button>
                                </div>
                             </div>
                         </div>
                    </div>

                    <div class="section">
                         <h3 class="section-toggle">Left Lobe / Thùy Trái</h3>
                         <div class="section-content">
                            <div class="form-group dimension-group">
                                <label>Dimensions (mm) / Kích thước (mm):</label>
                                <input type="number" step="0.1" class="dimension" id="left-lobe-d1" name="leftLobeD1" placeholder="Width / Ngang" data-lobe="left" title="Ngang"> <span class="normal-range-text">(N: 13-18)</span> x
                                <input type="number" step="0.1" class="dimension" id="left-lobe-d2" name="leftLobeD2" placeholder="AP / Trước-Sau" data-lobe="left" title="Trước-Sau"> <span class="normal-range-text">(N: 13-18)</span> x
                                <input type="number" step="0.1" class="dimension" id="left-lobe-d3" name="leftLobeD3" placeholder="Length / Dọc" data-lobe="left" title="Dọc"> <span class="normal-range-text">(N: 40-60)</span>
                                <br>
                                <span class="volume-display">Volume / Thể tích: <span id="left-lobe-volume">0</span> mL</span> <span class="normal-range-text">(Nữ/Female: &lt; 18mL, Nam/Male: &lt; 25mL)</span> <input type="hidden" name="leftLobeVolume" id="left-lobe-volume-hidden">
                            </div>
                             <div class="form-group">
                                <label for="left-lobe-findings">Findings / Parenchyma / Mô tả / Chủ mô:</label>
                                <textarea id="left-lobe-findings" name="leftLobeFindings" rows="3" placeholder="Describe parenchyma, presence of lesions... / Mô tả chủ mô, sự hiện diện của tổn thương..."></textarea>
                                 <div class="suggestion-button-container">
                                     <button type="button" class="suggestion-btn" data-insert="Normal parenchymal echotexture and vascularity. No focal lesion identified. / Chủ mô cấu trúc âm và tưới máu bình thường. Không thấy tổn thương khu trú.">Chủ mô BT</button>
                                     <button type="button" class="suggestion-btn" data-insert="Diffusely heterogeneous echotexture. / Cấu trúc âm không đồng nhất lan tỏa.">Không đồng nhất</button>
                                     <button type="button" class="suggestion-btn" data-insert="Coarse parenchymal echotexture. / Cấu trúc nhu mô thô.">Cấu trúc thô</button>
                                     <button type="button" class="suggestion-btn" data-insert="Areas of cystic degeneration noted. / Ghi nhận các vùng thoái hóa nang.">Thoái hóa nang</button>
                                     <button type="button" class="suggestion-btn" data-insert="Prominent fibrous septations noted. / Ghi nhận các vách xơ rõ.">Có vách xơ</button>
                                     <button type="button" class="suggestion-btn" data-insert="Contains multiple nodules (described below). / Chứa nhiều nhân (mô tả bên dưới).">Có nhiều nhân</button>
                                 </div>
                             </div>
                         </div>
                    </div>

                    <div class="section">
                         <h3 class="section-toggle">Isthmus / Eo giáp</h3>
                         <div class="section-content">
                            <div class="form-group">
                                <label for="isthmus-thickness">AP Thickness (mm) / Bề dày Trước-Sau (mm):</label>
                                <input type="number" step="0.1" id="isthmus-thickness" name="isthmusThickness">
                                <span class="normal-range-text" id="isthmus-range">(Normal / BT: 2-6 mm)</span>
                            </div>
                            <div class="form-group">
                                <label for="isthmus-findings">Findings / Mô tả:</label>
                                <textarea id="isthmus-findings" name="isthmusFindings" rows="2" placeholder="Describe isthmus... / Mô tả eo giáp..."></textarea>
                                 <div class="suggestion-button-container">
                                     <button type="button" class="suggestion-btn" data-insert="Normal thickness and echotexture. / Bề dày và cấu trúc âm bình thường.">Eo giáp BT</button>
                                     <button type="button" class="suggestion-btn" data-insert="Heterogeneous echotexture. / Cấu trúc âm không đồng nhất.">Không đồng nhất</button>
                                     <button type="button" class="suggestion-btn" data-insert="Contains small nodules/cysts. / Có chứa các nhân/nang nhỏ.">Có tổn thương</button>
                                     <button type="button" class="suggestion-btn" data-insert="Thickened. / Dày.">Dày</button>
                                     <button type="button" class="suggestion-btn" data-insert="Not well visualized. / Quan sát không rõ.">Không rõ</button>
                                 </div>
                             </div>
                         </div>
                    </div>

                    <div class="section">
                         <h3 class="section-toggle">Focal Lesions (Nodules) / Tổn thương khu trú (Nhân giáp)</h3>
                         <div class="section-content">
                             <div id="lesions-container">
                                 </div>
                             <button type="button" id="add-lesion-btn"><i class="fas fa-plus"></i> Add Lesion / Thêm tổn thương</button>
                         </div>
                    </div>

                    <div class="section">
                        <h3 class="section-toggle">Regional Lymph Nodes / Hạch vùng cổ</h3>
                        <div class="section-content">
                            <div class="form-group">
                                <label for="lymph-nodes">Findings / Mô tả:</label>
                                <input type="text" id="lymph-nodes" name="lymphNodes" placeholder="Describe nodes or select suggestion... / Mô tả hạch hoặc chọn gợi ý..." list="lymph-node-suggestions">
                                <datalist id="lymph-node-suggestions">
                                    <option value="No suspicious cervical lymphadenopathy identified. / Không thấy hạch cổ bệnh lý nghi ngờ."></option>
                                    <option value="Few small, oval nodes with preserved fatty hila, likely reactive. / Vài hạch nhỏ, bầu dục, còn rốn mỡ, khả năng là hạch phản ứng."></option>
                                    <option value="Suspicious lymph node(s) noted (specify details). / Ghi nhận hạch nghi ngờ (ghi rõ chi tiết)."></option>
                                    <option value="Not specifically evaluated. / Không đánh giá đặc biệt."></option>
                                </datalist>
                                <div class="suggestion-button-container">
                                    <button type="button" class="suggestion-btn" data-insert="No suspicious cervical lymphadenopathy identified. / Không thấy hạch cổ bệnh lý nghi ngờ.">Không hạch nghi ngờ</button>
                                    <button type="button" class="suggestion-btn" data-insert="Few small, oval nodes with preserved fatty hila, likely reactive. / Vài hạch nhỏ, bầu dục, còn rốn mỡ, khả năng là hạch phản ứng.">Hạch phản ứng</button>
                                    <button type="button" class="suggestion-btn" data-insert="Suspicious node(s) with cystic changes noted. / Ghi nhận (các) hạch nghi ngờ có thoái hóa nang.">Hạch dạng nang</button>
                                    <button type="button" class="suggestion-btn" data-insert="Suspicious node(s) with calcifications (micro- or macro-) noted. / Ghi nhận (các) hạch nghi ngờ có vôi hóa (vi hoặc thô).">Hạch vôi hóa</button>
                                    <button type="button" class="suggestion-btn" data-insert="Suspicious node(s) are rounded, hypoechoic, with loss of fatty hilum. / (Các) hạch nghi ngờ hình tròn, giảm âm, mất rốn mỡ.">Hạch tròn/mất rốn mỡ</button>
                               </div>
                            </div>
                        </div>
                    </div>

                    <div class="section">
                          <h3 class="section-toggle">Impression / Conclusion / Kết luận</h3>
                          <div class="section-content">
                              <div class="form-group">
                                   <label for="impression">Impression / Conclusion / Kết luận:</label>
                                   <textarea id="impression" name="impression" rows="4" placeholder="Summarize findings and provide overall impression... / Tóm tắt các phát hiện và đưa ra kết luận tổng thể..."></textarea>
                                   <div class="suggestion-button-container">
                                       <button type="button" class="suggestion-btn" data-insert="Normal thyroid ultrasound. / Siêu âm tuyến giáp bình thường.">Tuyến giáp BT</button>
                                       <button type="button" class="suggestion-btn" data-insert="Multinodular goiter with nodules assessed per ACR TI-RADS. / Bướu giáp đa nhân với các nhân được đánh giá theo ACR TI-RADS.">Bướu giáp đa nhân</button>
                                       <button type="button" class="suggestion-btn" data-insert="Findings consistent with Hashimoto's thyroiditis. Any discrete nodules assessed separately. / Hình ảnh phù hợp viêm giáp Hashimoto. Các nhân khu trú được đánh giá riêng.">Viêm giáp Hashimoto</button>
                                       <button type="button" class="suggestion-btn" data-insert="Findings highly suggestive of Graves' disease. / Hình ảnh rất gợi ý bệnh Graves.">Bệnh Graves</button>
                                       <button type="button" class="suggestion-btn" data-insert="Suspicious nodule(s) identified (ACR TI-RADS TR ). Recommend FNA. / Ghi nhận nhân giáp nghi ngờ (ACR TI-RADS TR ). Đề nghị FNA.">Nhân nghi ngờ (FNA)</button>
                                       <button type="button" class="suggestion-btn" data-insert="Benign-appearing nodule(s) identified (ACR TI-RADS TR ). / Ghi nhận nhân giáp dạng lành tính (ACR TI-RADS TR ).">Nhân lành tính</button>
                                       <button type="button" class="suggestion-btn" data-insert="Findings suggestive of subacute thyroiditis. Correlate clinically. / Hình ảnh gợi ý viêm giáp bán cấp. Kết hợp lâm sàng.">Viêm giáp bán cấp</button>
                                   </div>
                               </div>
                          </div>
                    </div>

                    <div class="section">
                        <h3 class="section-toggle">Recommendation / Đề nghị</h3>
                        <div class="section-content">
                            <div class="form-group">
                                 <label for="recommendation">Recommendation / Đề nghị:</label>
                                 <textarea id="recommendation" name="recommendation" rows="3" placeholder="Enter recommendations... / Nhập đề nghị..."></textarea>
                                  <div class="suggestion-button-container">
                                      <button type="button" class="suggestion-btn" data-insert="Fine Needle Aspiration (FNA) recommended for [nodule description]. / Đề nghị Chọc hút tế bào bằng kim nhỏ (FNA) cho [mô tả nhân].">Đề nghị FNA</button>
                                      <button type="button" class="suggestion-btn" data-insert="Ultrasound follow-up in [X] months recommended. / Đề nghị siêu âm theo dõi sau [X] tháng.">Theo dõi SA</button>
                                      <button type="button" class="suggestion-btn" data-insert="Clinical correlation and laboratory tests (TSH, FT4) recommended. / Đề nghị kết hợp lâm sàng và xét nghiệm (TSH, FT4).">Kết hợp LS/XN</button>
                                      <button type="button" class="suggestion-btn" data-insert="No specific follow-up needed based on ultrasound findings. / Không cần theo dõi đặc biệt dựa trên hình ảnh siêu âm.">Không cần theo dõi</button>
                                  </div>
                             </div>
                        </div>
                  </div>

                </form>
            </div>

            <div class="tab-content" id="images">
                 <h2>Ultrasound Images / Hình ảnh Siêu âm</h2>
                 <div class="form-group">
                     <label for="image-upload">Upload Images / Tải ảnh lên:</label>
                     <input type="file" id="image-upload" multiple accept="image/*" style="display: block; margin-top: 5px;">
                 </div>
                 <div id="image-preview-container" style="margin-top: 15px;">
                     </div>
            </div>

            <div class="tab-content" id="templates">
                <h2>Template Management / Quản lý Mẫu</h2>
                <div class="form-group">
                    <label for="template-name">Template Name / Tên Mẫu:</label>
                    <input type="text" id="template-name" placeholder="Enter name to save / Nhập tên để lưu">
                    <button type="button" id="save-template-btn"><i class="fas fa-save"></i> Save Current as Template / Lưu thành Mẫu</button>
                </div>
                <hr>
                <div class="form-group">
                    <label for="load-template-select">Select Template to Load / Chọn Mẫu để tải:</label>
                    <select id="load-template-select">
                        <option value="">-- Select Template / Chọn Mẫu --</option>
                        <optgroup label="Preset Templates / Mẫu có sẵn" id="preset-templates-group"></optgroup>
                        <optgroup label="Saved Templates / Mẫu đã lưu" id="user-templates-group"></optgroup>
                    </select>
                    <button type="button" id="load-template-btn"><i class="fas fa-download"></i> Load Template / Tải Mẫu</button>
                    <button type="button" id="delete-template-btn" class="danger-btn"><i class="fas fa-trash-alt"></i> Delete Selected Template / Xóa Mẫu</button>
                </div>
                <hr>
                <div class="form-group">
                    <label for="import-template-file">Import Template (JSON) / Nhập Mẫu (JSON):</label>
                    <input type="file" id="import-template-file" accept=".json">
                    <button type="button" id="import-template-btn"><i class="fas fa-file-import"></i> Import / Nhập</button>
                </div>
                <div class="form-group">
                    <label>Export Current State / Xuất trạng thái hiện tại:</label>
                    <button type="button" id="export-template-btn"><i class="fas fa-file-export"></i> Export Current State (JSON) / Xuất (JSON)</button>
                </div>
            </div>

            <div class="tab-content" id="report">
                 <h2>Report Preview & Actions / Xem trước & Thao tác Báo cáo</h2>

                 <div id="report-preview" class="report-output-area">
                     <p class="placeholder-text"><i>Report preview (EN) will appear here after generation. / Bản xem trước (EN) sẽ hiện ở đây sau khi tạo.</i></p>
                 </div>

                 <div class="report-section-container" id="translation-section" style="margin-top: 20px; display: none;">
                     <div class="report-header">
                         <h3><i class="fas fa-language"></i> Vietnamese Translation / Bản dịch Tiếng Việt (VI)</h3>
                         <button type="button" id="edit-translation-btn" class="edit-toggle-btn" style="display: none;"><i class="fas fa-edit"></i> Sửa bản dịch</button>
                     </div>
                     <div id="translation-content" class="report-output-area" style="border-top: 1px solid #ddd; border-radius: 0 0 5px 5px; min-height: 100px;">
                         <p class="placeholder-text"><i>Translation (VI) will appear here. / Bản dịch (VI) sẽ hiện ở đây.</i></p>
                     </div>
                     <textarea id="translation-edit-area" class="report-textarea" rows="15" style="display: none; border-radius: 0 0 5px 5px; border-top: 1px solid #ddd; margin-top: -1px;" placeholder="Edit the Markdown translation here... / Chỉnh sửa bản dịch dạng Markdown tại đây..."></textarea>
                 </div>

                 <div id="translation-loading" style="text-align: center; margin-top: 15px; display: none;">
                      <span class="loading-spinner"></span> Translating report... / Đang dịch báo cáo...
                 </div>

                 <div class="report-actions">
                     <button type="button" id="generate-report-btn"><i class="fas fa-cogs"></i> Generate Report / Tạo Báo cáo</button>
                     <button type="button" id="translate-report-btn" style="display: none;" class="action-btn-translate"><i class="fas fa-language"></i> Dịch (VI)</button>
                     <button type="button" id="print-report-btn" style="display: none;"><i class="fas fa-print"></i> Print / In (EN)</button>
                     <button type="button" id="print-translation-btn" style="display: none;" class="action-btn-print-vi"><i class="fas fa-print"></i> Print / In (VI)</button>
                     <button type="button" id="export-report-html-btn" style="display: none;"><i class="fas fa-file-export"></i> Export / Xuất (HTML)</button>
                 </div>
            </div>

        </div> <div id="notifications"></div>

    </div> <template id="lesion-template">
        <div class="lesion-item" data-lesion-id="">
            <h4>Lesion <span class="lesion-number"></span> / Tổn thương <span class="lesion-number"></span>
                <button type="button" class="remove-lesion-btn danger-btn" title="Remove this lesion / Xóa tổn thương này"><i class="fas fa-trash-alt"></i> Remove / Xóa</button>
            </h4>
            <div class="lesion-grid"> <div class="form-group grid-span-2"> <label>Location / Vị trí:</label>
                    <select name="lesionLocation" class="lesion-field">
                        <option value="">-- Select / Chọn --</option>
                        <optgroup label="Right Lobe / Thùy Phải">
                            <option value="Right Lobe - Upper / Thùy Phải - Cực trên">Upper Pole / Cực trên</option>
                            <option value="Right Lobe - Mid / Thùy Phải - Giữa">Mid-portion / Phần giữa</option>
                            <option value="Right Lobe - Lower / Thùy Phải - Cực dưới">Lower Pole / Cực dưới</option>
                            <option value="Right Lobe - Anterior / Thùy Phải - Trước">Anterior / Trước</option>
                            <option value="Right Lobe - Posterior / Thùy Phải - Sau">Posterior / Sau</option>
                            <option value="Right Lobe - Medial / Thùy Phải - Trong">Medial / Trong</option>
                            <option value="Right Lobe - Lateral / Thùy Phải - Ngoài">Lateral / Ngoài</option>
                        </optgroup>
                        <optgroup label="Left Lobe / Thùy Trái">
                            <option value="Left Lobe - Upper / Thùy Trái - Cực trên">Upper Pole / Cực trên</option>
                            <option value="Left Lobe - Mid / Thùy Trái - Giữa">Mid-portion / Phần giữa</option>
                            <option value="Left Lobe - Lower / Thùy Trái - Cực dưới">Lower Pole / Cực dưới</option>
                            <option value="Left Lobe - Anterior / Thùy Trái - Trước">Anterior / Trước</option>
                            <option value="Left Lobe - Posterior / Thùy Trái - Sau">Posterior / Sau</option>
                            <option value="Left Lobe - Medial / Thùy Trái - Trong">Medial / Trong</option>
                            <option value="Left Lobe - Lateral / Thùy Trái - Ngoài">Lateral / Ngoài</option>
                        </optgroup>
                        <option value="Isthmus / Eo giáp">Isthmus / Eo giáp</option>
                    </select>
                </div>
                <div class="form-group dimension-group grid-span-4"> <label>Dimensions (mm) / Kích thước (mm):</label>
                     <input type="number" step="0.1" class="dimension lesion-field" name="lesionD1" placeholder="W" title="Width / Ngang"> x
                     <input type="number" step="0.1" class="dimension lesion-field" name="lesionD2" placeholder="AP" title="Antero-Posterior / Trước-Sau"> x
                     <input type="number" step="0.1" class="dimension lesion-field" name="lesionD3" placeholder="L" title="Length / Dọc">
                 </div>

                 <div class="form-group grid-span-3">
                     <label>Composition / Thành phần:</label>
                     <select name="lesionComposition" class="lesion-field tirads-field">
                          <option value="">-- Select / Chọn --</option>
                          <option value="0">Cystic or almost completely cystic / Dạng nang hoặc gần hoàn toàn nang (0đ)</option>
                          <option value="0">Spongiform / Dạng bọt biển (0đ)</option>
                          <option value="1">Mixed cystic and solid / Hỗn hợp nang và đặc (1đ)</option>
                          <option value="2">Solid or almost completely solid / Đặc hoặc gần như đặc (2đ)</option>
                     </select>
                 </div>
                 <div class="form-group grid-span-3">
                      <label>Echogenicity / Độ hồi âm:</label>
                      <select name="lesionEchogenicity" class="lesion-field tirads-field">
                           <option value="">-- Select / Chọn --</option>
                           <option value="0">Anechoic / Trống âm (0đ)</option>
                           <option value="1">Hyperechoic or Isoechoic / Tăng hoặc đồng hồi âm (1đ)</option>
                           <option value="2">Hypoechoic / Giảm hồi âm (2đ)</option>
                           <option value="3">Very hypoechoic / Rất giảm hồi âm (3đ)</option>
                      </select>
                  </div>

                  <div class="form-group grid-span-2">
                       <label>Shape / Hình dạng:</label>
                       <select name="lesionShape" class="lesion-field tirads-field">
                            <option value="">-- Select / Chọn --</option>
                            <option value="0">Wider-than-tall / Rộng hơn cao (0đ)</option>
                            <option value="3">Taller-than-wide / Cao hơn rộng (3đ)</option>
                       </select>
                   </div>
                   <div class="form-group grid-span-2">
                        <label>Margin / Đường bờ:</label>
                        <select name="lesionMargin" class="lesion-field tirads-field">
                             <option value="">-- Select / Chọn --</option>
                             <option value="0">Smooth or Ill-defined / Trơn láng hoặc không rõ (0đ)</option>
                             <option value="2">Lobulated or Irregular / Bờ thùy hoặc không đều (2đ)</option>
                             <option value="3">Extra-thyroidal extension / Xâm lấn vỏ bao (3đ)</option>
                        </select>
                    </div>
                     <div class="form-group grid-span-2">
                         <label>Echogenic Foci / Đốm hồi âm dày:</label>
                         <select name="lesionEchogenicFoci" multiple size="4" class="lesion-field tirads-field" title="Hold Ctrl/Cmd to select multiple">
                              <option value="0">None or Large comet-tail / Không hoặc có vôi hóa lớn dạng đuôi sao chổi (0đ)</option>
                              <option value="1">Macrocalcifications / Vôi hóa thô (1đ)</option>
                              <option value="1">Peripheral (rim) calcifications / Vôi hóa viền (1đ)</option> <option value="3">Punctate echogenic foci (PEF) / Vi vôi hóa (PEF) (3đ)</option> </select>
                         </div>

                     <div class="form-group tirads-summary grid-span-6"> <label>ACR TI-RADS:</label>
                         <span>Score / Điểm: <span class="tirads-score">0</span> pts</span> |
                         <span style="margin-left: 10px;">Category / Phân loại: <span class="tirads-category">TR?</span></span>
                         <p class="tirads-recommendation" style="margin-top: 5px;">Recommendation / Khuyến nghị:</p>
                         <input type="hidden" name="tiradsScore">
                         <input type="hidden" name="tiradsCategory">
                         <input type="hidden" name="tiradsRecommendation">
                     </div>

                     <div class="form-group grid-span-6"> <label>Additional Description / Mô tả thêm:</label>
                         <textarea name="lesionDescription" rows="2" class="lesion-field lesion-description-textarea" placeholder="Other relevant features, comparison, vascularity... / Các đặc điểm liên quan khác, so sánh, tưới máu..."></textarea>
                         <div class="suggestion-button-container">
                              <button type="button" class="suggestion-btn" data-insert="Likely benign features. / Đặc điểm khả năng lành tính.">Lành tính</button>
                              <button type="button" class="suggestion-btn" data-insert="Demonstrates features suspicious for malignancy. / Cho thấy các đặc điểm nghi ngờ ác tính.">Nghi ngờ</button>
                              <button type="button" class="suggestion-btn" data-insert="Typical colloid cyst appearance with comet-tail artifact. / Hình ảnh nang keo điển hình với dấu hiệu đuôi sao chổi.">Nang keo điển hình</button>
                              <button type="button" class="suggestion-btn" data-insert="Internal vascularity noted on Doppler (Type II/III). / Ghi nhận tưới máu trong nhân trên Doppler (Loại II/III).">Tưới máu trong</button>
                              <button type="button" class="suggestion-btn" data-insert="Peripheral (rim) vascularity noted (Type I). / Ghi nhận tưới máu ngoại vi (viền) (Loại I).">Tưới máu viền</button>
                              <button type="button" class="suggestion-btn" data-insert="Avascular. / Vô mạch.">Vô mạch</button>
                              <button type="button" class="suggestion-btn" data-insert="Stable compared to previous exam dated [YYYY-MM-DD]. / Ổn định so với lần khám trước ngày [YYYY-MM-DD].">Ổn định</button>
                              <button type="button" class="suggestion-btn" data-insert="Increased in size compared to previous exam. / Tăng kích thước so với lần khám trước.">Tăng kích thước</button>
                         </div>
                     </div>
            </div> </div>
    </template>

    <script type="module" src="js/main.js"></script>

</body>
</html>



/* styles.css */
/* Main stylesheet for the Ultrasound Reporting System - CLEANED VERSION */

/* === General Styles === */
body {
    font-family: Arial, Helvetica, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    background-color: #f0f2f5;
    color: #333;
}

.container {
    max-width: 1100px;
    margin: 20px auto;
    background: #ffffff;
    padding: 20px 30px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

h1, h2, h3, h4 {
    color: #2c3e50;
    margin-top: 0.5em;
    margin-bottom: 0.8em;
}
h1 {
    text-align: center;
    border-bottom: 2px solid #e0e0e0;
    padding-bottom: 15px;
    margin-bottom: 25px;
    font-size: 1.8em;
}
h2 {
    font-size: 1.5em;
    border-bottom: 1px solid #eee;
    padding-bottom: 8px;
}
h3 { /* General H3 style */
    font-size: 1.25em;
    color: #16a085; /* Teal color */
}
h4 { /* General H4 style */
    font-size: 1.1em;
    color: #34495e;
    margin-bottom: 0.5em;
}

hr.report-hr {
     border: none; border-top: 1px solid #eee; margin: 1.2em 0;
}

/* === Tab System === */
.tab-container {
    margin-top: 25px;
}
.tab-nav {
    display: flex;
    border-bottom: 2px solid #bdc3c7;
    margin-bottom: 0;
}
.tab-button {
    padding: 12px 20px;
    cursor: pointer;
    border: none;
    background-color: #f8f9fa;
    border-bottom: 3px solid transparent;
    margin-right: 5px;
    margin-bottom: -2px;
    font-size: 1.05em;
    color: #7f8c8d;
    transition: all 0.3s ease;
    border-radius: 5px 5px 0 0;
}
.tab-button:hover {
    color: #34495e;
    background-color: #e9ecef;
}
.tab-button.active {
    border-bottom-color: #3498db;
    background-color: #ffffff;
    font-weight: bold;
    color: #2980b9;
}
.tab-content {
    display: none;
    padding: 25px;
    border: 1px solid #bdc3c7;
    border-top: none;
    border-radius: 0 0 6px 6px;
    background-color: #ffffff;
    min-height: 400px;
}
.tab-content.active {
    display: block;
    animation: fadeIn 0.5s ease;
}
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* === Form Styles === */
.form-group {
    margin-bottom: 18px;
}
.form-group label {
    display: block;
    margin-bottom: 6px;
    font-weight: bold;
    color: #555;
    font-size: 0.95em;
}
.form-group input[type="text"],
.form-group input[type="number"],
.form-group input[type="date"],
.form-group input[type="file"],
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    font-size: 1em;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}
.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    border-color: #3498db;
    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
    outline: none;
}
.form-group select[multiple] { height: 120px; }
.form-group select[multiple] option { padding: 5px; }
.form-group textarea { min-height: 70px; resize: vertical; }

/* Dimension group specific styles */
.form-group.dimension-group { line-height: 1.8; }
.form-group.dimension-group input[type="number"] { width: 85px; margin-right: 3px; text-align: center; }
.form-group.dimension-group span { font-style: italic; color: #666; font-size: 0.95em; }
.form-group.dimension-group .normal-range-text { font-size: 0.85em; color: #6c757d; margin-left: 2px; margin-right: 5px; }
.form-group.dimension-group .volume-display { margin-left: 10px; font-style: normal; color: #333; }
.form-group.dimension-group .volume-display span[id$="-volume"] { font-weight: bold; color: #111; }

/* TI-RADS Display Specific Styles */
.form-group span.tirads-score,
.form-group span.tirads-category { font-weight: bold; background-color: #e9ecef; padding: 4px 8px; border-radius: 4px; margin: 0 5px; display: inline-block; }
.form-group p.tirads-recommendation { margin-top: 6px; font-size: 0.9em; color: #c0392b; font-style: italic; }

/* Validation Feedback (Example) */
.form-group input:invalid,
.form-group select:invalid,
.form-group textarea:invalid { border-color: #e74c3c; }

/* === Section Toggles === */
.section { margin-bottom: 25px; border: 1px solid #e0e0e0; border-radius: 6px; overflow: hidden; }
.section h3.section-toggle { background-color: #f8f9fa; padding: 12px 18px; cursor: pointer; margin: 0; border-bottom: 1px solid #e0e0e0; position: relative; color: #34495e; border-radius: 5px 5px 0 0; font-size: 1.15em; transition: background-color 0.2s ease; }
.section h3.section-toggle:hover { background-color: #e9ecef; }
.section h3.section-toggle::after { content: '▼'; position: absolute; right: 18px; top: 50%; transform: translateY(-50%); transition: transform 0.3s ease; font-size: 0.8em; color: #7f8c8d; }
.section h3.section-toggle.active::after { transform: translateY(-50%) rotate(180deg); }
.section .section-content { padding: 18px; display: none; border-top: none; background-color: #fff; }
.section .section-content.active { display: block; }

/* === Lesion Item Styles === */
.lesion-item { border: 1px dashed #bdc3c7; padding: 20px; margin-bottom: 20px; border-radius: 5px; background-color: #fafafa; position: relative; }
.lesion-item h4 { margin-top: 0; margin-bottom: 18px; color: #2980b9; border-bottom: 1px solid #eee; padding-bottom: 10px; font-size: 1.1em; }
.lesion-item .remove-lesion-btn { position: absolute; top: 15px; right: 15px; background-color: #e74c3c; color: white; border: none; padding: 6px 10px; cursor: pointer; border-radius: 4px; font-size: 0.85em; line-height: 1; transition: background-color 0.2s ease; }
.lesion-item .remove-lesion-btn:hover { background-color: #c0392b; }

/* === Button Styles === */
button { padding: 10px 18px; background-color: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 1em; transition: background-color 0.3s ease, box-shadow 0.3s ease; margin-right: 8px; vertical-align: middle; }
button:hover { background-color: #2980b9; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
button:active { background-color: #2471a3; }
button:disabled { background-color: #bdc3c7; cursor: not-allowed; box-shadow: none; }
button i { margin-right: 6px; }

/* Specific button colors */
button#add-lesion-btn { background-color: #2ecc71; }
button#add-lesion-btn:hover { background-color: #27ae60; }
button#delete-template-btn { background-color: #e74c3c; }
button#delete-template-btn:hover { background-color: #c0392b; }
button#translate-report-btn { background-color: #ff9800; margin-left: 10px; } /* Added margin */
button#translate-report-btn:hover { background-color: #f57c00; }
button#print-translation-btn { background-color: #673ab7; }
button#print-translation-btn:hover { background-color: #512da8; }
button#export-report-html-btn { background-color: #78909c; }
button#export-report-html-btn:hover { background-color: #546e7a; }


/* === Suggestion Buttons Styling === */
.suggestion-button-container {
    margin-top: 8px;
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    display: none; /* HIDDEN BY DEFAULT */
}
.suggestion-btn {
    padding: 4px 10px;
    font-size: 0.85em;
    background-color: #e9ecef;
    color: #495057;
    border: 1px solid #ced4da;
    border-radius: 12px;
    cursor: pointer;
    transition: background-color 0.2s ease, border-color 0.2s ease;
    white-space: nowrap;
    margin: 0;
}
.suggestion-btn:hover { background-color: #dee2e6; border-color: #adb5bd; }
.suggestion-btn:active { background-color: #ced4da; }


/* === Image Preview in Upload Tab === */
#image-preview-container { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 15px; padding: 10px; background-color: #f8f9fa; border: 1px solid #e0e0e0; border-radius: 4px; min-height: 100px; }
.image-preview-wrapper { position: relative; display: inline-block; border: 1px solid #ccc; padding: 3px; background-color: #fff; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
.image-preview-wrapper img { max-width: 150px; max-height: 150px; display: block; }
.image-preview-wrapper .remove-image-btn { position: absolute; top: 2px; right: 2px; padding: 1px 5px; font-size: 0.75em; line-height: 1; border-radius: 3px; z-index: 1; background-color: #e74c3c; color: white; } /* Merged style */
.image-preview-wrapper .remove-image-btn:hover { background-color: #c0392b; }


/* === Report Tab Styling === */
/* --- English Report Preview Area --- */
#report-preview.report-output-area { /* Added common class */
    border: 1px solid #ccc;
    padding: 20mm;
    margin: 30px auto 0 auto;
    max-width: 210mm; /* A4 width simulation */
    box-sizing: border-box;
    background: #ffffff;
    box-shadow: 0 4px 15px rgba(0,0,0,0.15);
    font-family: 'Times New Roman', Times, serif;
    font-size: 11pt;
    line-height: 1.5;
    min-height: 100px;
    overflow-x: hidden;
    overflow-y: auto;
}
.report-output-area .placeholder-text {
    color: #888; text-align: center; padding: 20px 0; font-style: italic;
}

/* Styles for content *inside* #report-preview (English Report) */
#report-preview .report-container { width: 100%; box-sizing: border-box; }
#report-preview .report-title { text-align: center; font-size: 1.4em; margin-bottom: 1em; color: #111; font-weight: bold; }
#report-preview .report-section { margin-bottom: 1.2em; }
#report-preview .report-section-title { font-size: 1.15em; font-weight: bold; color: #222; border-bottom: 1px solid #bbb; margin-bottom: 0.6em; padding-bottom: 0.2em; font-family: Arial, sans-serif;}
#report-preview p { margin: 0.4em 0; }
#report-preview strong { font-weight: bold; color: #000; }
#report-preview hr.report-hr { border: none; border-top: 1px solid #ccc; margin: 1.2em 0; }
#report-preview .report-lesion-item { margin-bottom: 0.8em; padding-left: 1em; }
#report-preview .report-footer { margin-top: 2em; font-size: 0.9em; color: #444; text-align: center; border-top: 1px solid #ccc; padding-top: 0.8em; }
#report-preview .end-of-report { font-weight: bold; }
/* Images inside English report preview */
#report-preview .report-images-section .image-flex-container { display: flex; flex-wrap: wrap; justify-content: flex-start; gap: 10mm; margin-top: 10px; }
#report-preview .report-image-item { flex: 0 1 calc(50% - 5mm); box-sizing: border-box; text-align: center; margin-bottom: 10mm; }
#report-preview .report-image-item img { max-width: 100%; height: auto; border: 1px solid #aaa; display: block; margin: 0 auto 5px auto; }
#report-preview .report-image-item .caption { font-size: 9pt; color: #555; margin-top: 0; word-wrap: break-word; }

/* --- Translation Section Styling --- */
#report .report-section-container#translation-section {
    margin-top: 25px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fdfdfd;
    /* display: none; /* Controlled by JS */
}
#report .report-section-container#translation-section .report-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
    background-color: #f0f8ff; /* Light blue header for translation */
    border-bottom: 1px solid #cce5ff;
    border-radius: 5px 5px 0 0;
}
#report .report-section-container#translation-section .report-header h3 {
    margin: 0;
    font-size: 1.1em; /* Adjusted size */
    color: #0056b3;
    display: flex;
    align-items: center;
    gap: 8px;
}
#report .report-section-container#translation-section .edit-toggle-btn {
    padding: 5px 10px;
    font-size: 0.9em;
    background-color: #e0e0e0;
    color: #333;
    /* No specific editing class needed here as it's handled by JS text change */
}
#report .report-section-container#translation-section .edit-toggle-btn:hover {
    background-color: #d5d5d5;
}
#report .report-section-container#translation-section .edit-toggle-btn.editing {
    background-color: #c8e6c9; /* Light green when in save mode */
    color: #2e7d32;
}

/* Div showing formatted translation */
#translation-content {
    padding: 15px 20mm; /* Match preview padding if needed, or adjust */
    border-top: none; /* Header has bottom border */
    background-color:#fff;
    border-radius: 0 0 5px 5px;
    font-family: 'Times New Roman', Times, serif; font-size: 11pt; line-height: 1.5; color: #333; white-space: normal; /* Let HTML handle wrapping */
    min-height: 50px; /* Ensure it has some height even when empty */
}
/* Styles for elements generated by marked.js INSIDE #translation-content */
#translation-content h3 { font-size: 1.15em; font-weight: bold; color: #222; border-bottom: 1px solid #bbb; margin-top: 1.2em; margin-bottom: 0.6em; padding-bottom: 0.2em; font-family: Arial, sans-serif; }
#translation-content h4 { font-size: 1.1em; font-weight: bold; color: #333; margin-top: 1em; margin-bottom: 0.5em; font-family: Arial, sans-serif;}
#translation-content p { margin: 0.4em 0 1em 0; }
#translation-content strong { font-weight: bold; color: #000; }
#translation-content ul, #translation-content ol { margin: 0.5em 0 1em 0; padding-left: 25px; }
#translation-content li { margin-bottom: 0.3em; }
#translation-content br { display: block; content: ""; margin-bottom: 0.6em; }

/* Textarea for editing translation */
#translation-edit-area {
    width: 100%; box-sizing: border-box; padding: 15px 20mm; border: none;
    font-family: Arial, sans-serif; /* Sans-serif for editing */
    font-size: 11pt; line-height: 1.6; background-color: #fff; resize: vertical;
    border-radius: 0 0 5px 5px; border-top: 1px solid #ddd; margin-top: -1px;
    min-height: 400px; display: none; /* Initially hidden */
}
#translation-edit-area:focus { outline: none; box-shadow: inset 0 0 5px rgba(0,0,0,0.1); }

/* Loading Indicator */
#translation-loading { text-align: center; margin: 20px 0; color: #555; font-style: italic; display: none; padding: 15px; }
#translation-loading .loading-spinner { vertical-align: middle; margin-right: 8px; border-color: rgba(0,0,0,0.1); border-top-color: #ff9800; display: inline-block; width: 18px; height: 18px; border-width: 3px; border-style: solid; border-radius: 50%; animation: spin 1s linear infinite; }
@keyframes spin { to { transform: rotate(360deg); } }


/* Action Buttons Area */
#report .report-actions { margin-top: 25px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; display: flex; flex-wrap: wrap; justify-content: center; gap: 10px; }
#report .report-actions button { min-width: 140px; }


/* === Notifications === */
#notifications { position: fixed; bottom: 20px; right: 20px; z-index: 1000; max-width: 300px; }
.notification { background-color: #34495e; color: white; padding: 12px 18px; margin-bottom: 10px; border-radius: 5px; box-shadow: 0 3px 8px rgba(0,0,0,0.2); opacity: 0.95; transition: opacity 0.5s ease, transform 0.5s ease; font-size: 0.95em; }
.notification.success { background-color: #27ae60; }
.notification.error { background-color: #c0392b; }
.notification.info { background-color: #2980b9; }


/* === Print Styles === */
@media print {
    body { margin: 0; font-size: 10pt; background-color: #fff !important; color: #000 !important; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important; }
    /* Hide UI */
    .container > h1, .tab-container, button:not(.print-me), #notifications, .form-group label:not(.caption),
    #templates, .image-preview-container, .lesion-item .remove-lesion-btn, .suggestion-button-container,
    #report .report-header, /* Hide headers within report tab for print */
    #translation-loading, #edit-translation-btn, #translation-edit-area,
    #report .report-actions /* Hide action buttons */
     { display: none !important; }

    /* Ensure only the printed content's container is visible */
    /* This is handled by the print helper function creating a new window/iframe */

    /* Base styles for printed content (applied via print helper) */
    .printable-content { /* Assume print helper adds this class */
        font-family: 'Times New Roman', Times, serif !important;
        font-size: 10pt !important;
        line-height: 1.4 !important;
        color: #000 !important;
    }
    .printable-content h2, .printable-content h3, .printable-content h4 {
        font-family: Arial, sans-serif !important;
        font-weight: bold !important;
        page-break-after: avoid !important;
        color: #000 !important;
    }
    .printable-content h2.report-title { text-align: center; font-size: 1.3em; }
    .printable-content h3.report-section-title { font-size: 1.1em; border-bottom: 1px solid #999; margin-bottom: 0.5em; padding-bottom: 0.2em;}
    .printable-content p { orphans: 3; widows: 3; margin: 0.4em 0; }
    .printable-content strong { font-weight: bold !important; }
    .printable-content hr.report-hr { border: none !important; border-top: 1px solid #ccc !important; margin: 1em 0 !important; }
    .printable-content .report-section { page-break-inside: avoid !important; margin-bottom: 1em !important; }
    .printable-content .report-lesion-item { page-break-inside: avoid !important; margin-bottom: 0.7em !important; padding-left: 1em !important; }
    /* Image layout in print */
    .printable-content .report-images-section .image-flex-container { display: flex !important; flex-wrap: wrap !important; justify-content: space-between !important; gap: 8mm !important; }
    .printable-content .report-image-item { flex: 0 1 calc(50% - 4mm) !important; box-sizing: border-box !important; text-align: center !important; page-break-inside: avoid !important; margin-bottom: 8mm !important; }
    .printable-content .report-image-item img { max-width: 100% !important; border: 1px solid #999 !important; }
    .printable-content .report-image-item .caption { font-size: 8pt !important; color: #222 !important; }
    /* Footer */
    .printable-content .report-footer { margin-top: 1.5em !important; font-size: 9pt !important; color: #222 !important; text-align: center !important; border-top: 1px solid #999 !important; padding-top: 0.8em !important; }
    .printable-content .end-of-report { font-weight: bold !important; }
    /* Markdown lists/breaks */
     ul, ol { margin: 0.5em 0 1em 0; padding-left: 25px; }
     li { margin-bottom: 0.3em; page-break-inside: avoid; }
     br { display: block !important; content: "" !important; margin-bottom: 0.6em !important; }
     pre { white-space: pre-wrap !important; word-wrap: break-word !important; font-family: 'Courier New', monospace !important; font-size: 10pt !important; }
    /* Page Setup */
    @page { size: A4; margin: 15mm; }

    a[href]:after { content: none !important; } /* Don't print URLs */
}

/* styles.css */
/* Main stylesheet for the Ultrasound Reporting System - CLEANED VERSION */

/* === General Styles === */
body {
    font-family: Arial, Helvetica, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    background-color: #f0f2f5;
    color: #333;
}

.container {
    max-width: 1100px;
    margin: 20px auto;
    background: #ffffff;
    padding: 20px 30px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

h1, h2, h3, h4 {
    color: #2c3e50;
    margin-top: 0.5em;
    margin-bottom: 0.8em;
}
h1 {
    text-align: center;
    border-bottom: 2px solid #e0e0e0;
    padding-bottom: 15px;
    margin-bottom: 25px;
    font-size: 1.8em;
}
h2 {
    font-size: 1.5em;
    border-bottom: 1px solid #eee;
    padding-bottom: 8px;
}
h3 { /* General H3 style */
    font-size: 1.25em;
    color: #16a085; /* Teal color */
}
h4 { /* General H4 style */
    font-size: 1.1em;
    color: #34495e;
    margin-bottom: 0.5em;
}

hr.report-hr {
     border: none; border-top: 1px solid #eee; margin: 1.2em 0;
}

/* === Tab System === */
.tab-container {
    margin-top: 25px;
}
.tab-nav {
    display: flex;
    border-bottom: 2px solid #bdc3c7;
    margin-bottom: 0;
}
.tab-button {
    padding: 12px 20px;
    cursor: pointer;
    border: none;
    background-color: #f8f9fa;
    border-bottom: 3px solid transparent;
    margin-right: 5px;
    margin-bottom: -2px;
    font-size: 1.05em;
    color: #7f8c8d;
    transition: all 0.3s ease;
    border-radius: 5px 5px 0 0;
}
.tab-button:hover {
    color: #34495e;
    background-color: #e9ecef;
}
.tab-button.active {
    border-bottom-color: #3498db;
    background-color: #ffffff;
    font-weight: bold;
    color: #2980b9;
}
.tab-content {
    display: none;
    padding: 25px;
    border: 1px solid #bdc3c7;
    border-top: none;
    border-radius: 0 0 6px 6px;
    background-color: #ffffff;
    min-height: 400px;
}
.tab-content.active {
    display: block;
    animation: fadeIn 0.5s ease;
}
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

/* === Form Styles === */
.form-group {
    margin-bottom: 18px;
}
.form-group label {
    display: block;
    margin-bottom: 6px;
    font-weight: bold;
    color: #555;
    font-size: 0.95em;
}
.form-group input[type="text"],
.form-group input[type="number"],
.form-group input[type="date"],
.form-group input[type="file"],
.form-group select,
.form-group textarea {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    font-size: 1em;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}
.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
    border-color: #3498db;
    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
    outline: none;
}
.form-group select[multiple] { height: 120px; }
.form-group select[multiple] option { padding: 5px; }
.form-group textarea { min-height: 70px; resize: vertical; }

/* Dimension group specific styles */
.form-group.dimension-group { line-height: 1.8; }
.form-group.dimension-group input[type="number"] { width: 85px; margin-right: 3px; text-align: center; }
.form-group.dimension-group span { font-style: italic; color: #666; font-size: 0.95em; }
.form-group.dimension-group .normal-range-text { font-size: 0.85em; color: #6c757d; margin-left: 2px; margin-right: 5px; }
.form-group.dimension-group .volume-display { margin-left: 10px; font-style: normal; color: #333; }
.form-group.dimension-group .volume-display span[id$="-volume"] { font-weight: bold; color: #111; }

/* TI-RADS Display Specific Styles */
.form-group span.tirads-score,
.form-group span.tirads-category { font-weight: bold; background-color: #e9ecef; padding: 4px 8px; border-radius: 4px; margin: 0 5px; display: inline-block; }
.form-group p.tirads-recommendation { margin-top: 6px; font-size: 0.9em; color: #c0392b; font-style: italic; }

/* Validation Feedback (Example) */
.form-group input:invalid,
.form-group select:invalid,
.form-group textarea:invalid { border-color: #e74c3c; }

/* === Section Toggles === */
.section { margin-bottom: 25px; border: 1px solid #e0e0e0; border-radius: 6px; overflow: hidden; }
.section h3.section-toggle { background-color: #f8f9fa; padding: 12px 18px; cursor: pointer; margin: 0; border-bottom: 1px solid #e0e0e0; position: relative; color: #34495e; border-radius: 5px 5px 0 0; font-size: 1.15em; transition: background-color 0.2s ease; }
.section h3.section-toggle:hover { background-color: #e9ecef; }
.section h3.section-toggle::after { content: '▼'; position: absolute; right: 18px; top: 50%; transform: translateY(-50%); transition: transform 0.3s ease; font-size: 0.8em; color: #7f8c8d; }
.section h3.section-toggle.active::after { transform: translateY(-50%) rotate(180deg); }
.section .section-content { padding: 18px; display: none; border-top: none; background-color: #fff; }
.section .section-content.active { display: block; }

/* === Lesion Item Styles === */
.lesion-item { border: 1px dashed #bdc3c7; padding: 20px; margin-bottom: 20px; border-radius: 5px; background-color: #fafafa; position: relative; }
.lesion-item h4 { margin-top: 0; margin-bottom: 18px; color: #2980b9; border-bottom: 1px solid #eee; padding-bottom: 10px; font-size: 1.1em; }
.lesion-item .remove-lesion-btn { position: absolute; top: 15px; right: 15px; background-color: #e74c3c; color: white; border: none; padding: 6px 10px; cursor: pointer; border-radius: 4px; font-size: 0.85em; line-height: 1; transition: background-color 0.2s ease; }
.lesion-item .remove-lesion-btn:hover { background-color: #c0392b; }

/* === Button Styles === */
button { padding: 10px 18px; background-color: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 1em; transition: background-color 0.3s ease, box-shadow 0.3s ease; margin-right: 8px; vertical-align: middle; }
button:hover { background-color: #2980b9; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
button:active { background-color: #2471a3; }
button:disabled { background-color: #bdc3c7; cursor: not-allowed; box-shadow: none; }
button i { margin-right: 6px; }

/* Specific button colors */
button#add-lesion-btn { background-color: #2ecc71; }
button#add-lesion-btn:hover { background-color: #27ae60; }
button#delete-template-btn { background-color: #e74c3c; }
button#delete-template-btn:hover { background-color: #c0392b; }
button#translate-report-btn { background-color: #ff9800; margin-left: 10px; } /* Added margin */
button#translate-report-btn:hover { background-color: #f57c00; }
button#print-translation-btn { background-color: #673ab7; }
button#print-translation-btn:hover { background-color: #512da8; }
button#export-report-html-btn { background-color: #78909c; }
button#export-report-html-btn:hover { background-color: #546e7a; }


/* === Suggestion Buttons Styling === */
.suggestion-button-container {
    margin-top: 8px;
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    display: none; /* HIDDEN BY DEFAULT */
}
.suggestion-btn {
    padding: 4px 10px;
    font-size: 0.85em;
    background-color: #e9ecef;
    color: #495057;
    border: 1px solid #ced4da;
    border-radius: 12px;
    cursor: pointer;
    transition: background-color 0.2s ease, border-color 0.2s ease;
    white-space: nowrap;
    margin: 0;
}
.suggestion-btn:hover { background-color: #dee2e6; border-color: #adb5bd; }
.suggestion-btn:active { background-color: #ced4da; }


/* === Image Preview in Upload Tab === */
#image-preview-container { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 15px; padding: 10px; background-color: #f8f9fa; border: 1px solid #e0e0e0; border-radius: 4px; min-height: 100px; }
.image-preview-wrapper { position: relative; display: inline-block; border: 1px solid #ccc; padding: 3px; background-color: #fff; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
.image-preview-wrapper img { max-width: 150px; max-height: 150px; display: block; }
.image-preview-wrapper .remove-image-btn { position: absolute; top: 2px; right: 2px; padding: 1px 5px; font-size: 0.75em; line-height: 1; border-radius: 3px; z-index: 1; background-color: #e74c3c; color: white; } /* Merged style */
.image-preview-wrapper .remove-image-btn:hover { background-color: #c0392b; }


/* === Report Tab Styling === */
/* --- English Report Preview Area --- */
#report-preview.report-output-area { /* Added common class */
    border: 1px solid #ccc;
    padding: 20mm;
    margin: 30px auto 0 auto;
    max-width: 210mm; /* A4 width simulation */
    box-sizing: border-box;
    background: #ffffff;
    box-shadow: 0 4px 15px rgba(0,0,0,0.15);
    font-family: 'Times New Roman', Times, serif;
    font-size: 11pt;
    line-height: 1.5;
    min-height: 100px;
    overflow-x: hidden;
    overflow-y: auto;
}
.report-output-area .placeholder-text {
    color: #888; text-align: center; padding: 20px 0; font-style: italic;
}

/* Styles for content *inside* #report-preview (English Report) */
#report-preview .report-container { width: 100%; box-sizing: border-box; }
#report-preview .report-title { text-align: center; font-size: 1.4em; margin-bottom: 1em; color: #111; font-weight: bold; }
#report-preview .report-section { margin-bottom: 1.2em; }
#report-preview .report-section-title { font-size: 1.15em; font-weight: bold; color: #222; border-bottom: 1px solid #bbb; margin-bottom: 0.6em; padding-bottom: 0.2em; font-family: Arial, sans-serif;}
#report-preview p { margin: 0.4em 0; }
#report-preview strong { font-weight: bold; color: #000; }
#report-preview hr.report-hr { border: none; border-top: 1px solid #ccc; margin: 1.2em 0; }
#report-preview .report-lesion-item { margin-bottom: 0.8em; padding-left: 1em; }
#report-preview .report-footer { margin-top: 2em; font-size: 0.9em; color: #444; text-align: center; border-top: 1px solid #ccc; padding-top: 0.8em; }
#report-preview .end-of-report { font-weight: bold; }
/* Images inside English report preview */
#report-preview .report-images-section .image-flex-container { display: flex; flex-wrap: wrap; justify-content: flex-start; gap: 10mm; margin-top: 10px; }
#report-preview .report-image-item { flex: 0 1 calc(50% - 5mm); box-sizing: border-box; text-align: center; margin-bottom: 10mm; }
#report-preview .report-image-item img { max-width: 100%; height: auto; border: 1px solid #aaa; display: block; margin: 0 auto 5px auto; }
#report-preview .report-image-item .caption { font-size: 9pt; color: #555; margin-top: 0; word-wrap: break-word; }

/* --- Translation Section Styling --- */
#report .report-section-container#translation-section {
    margin-top: 25px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #fdfdfd;
    /* display: none; /* Controlled by JS */
}
#report .report-section-container#translation-section .report-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
    background-color: #f0f8ff; /* Light blue header for translation */
    border-bottom: 1px solid #cce5ff;
    border-radius: 5px 5px 0 0;
}
#report .report-section-container#translation-section .report-header h3 {
    margin: 0;
    font-size: 1.1em; /* Adjusted size */
    color: #0056b3;
    display: flex;
    align-items: center;
    gap: 8px;
}
#report .report-section-container#translation-section .edit-toggle-btn {
    padding: 5px 10px;
    font-size: 0.9em;
    background-color: #e0e0e0;
    color: #333;
    /* No specific editing class needed here as it's handled by JS text change */
}
#report .report-section-container#translation-section .edit-toggle-btn:hover {
    background-color: #d5d5d5;
}
#report .report-section-container#translation-section .edit-toggle-btn.editing {
    background-color: #c8e6c9; /* Light green when in save mode */
    color: #2e7d32;
}

/* Div showing formatted translation */
#translation-content {
    padding: 15px 20mm; /* Match preview padding if needed, or adjust */
    border-top: none; /* Header has bottom border */
    background-color:#fff;
    border-radius: 0 0 5px 5px;
    font-family: 'Times New Roman', Times, serif; font-size: 11pt; line-height: 1.5; color: #333; white-space: normal; /* Let HTML handle wrapping */
    min-height: 50px; /* Ensure it has some height even when empty */
}
/* Styles for elements generated by marked.js INSIDE #translation-content */
#translation-content h3 { font-size: 1.15em; font-weight: bold; color: #222; border-bottom: 1px solid #bbb; margin-top: 1.2em; margin-bottom: 0.6em; padding-bottom: 0.2em; font-family: Arial, sans-serif; }
#translation-content h4 { font-size: 1.1em; font-weight: bold; color: #333; margin-top: 1em; margin-bottom: 0.5em; font-family: Arial, sans-serif;}
#translation-content p { margin: 0.4em 0 1em 0; }
#translation-content strong { font-weight: bold; color: #000; }
#translation-content ul, #translation-content ol { margin: 0.5em 0 1em 0; padding-left: 25px; }
#translation-content li { margin-bottom: 0.3em; }
#translation-content br { display: block; content: ""; margin-bottom: 0.6em; }

/* Textarea for editing translation */
#translation-edit-area {
    width: 100%; box-sizing: border-box; padding: 15px 20mm; border: none;
    font-family: Arial, sans-serif; /* Sans-serif for editing */
    font-size: 11pt; line-height: 1.6; background-color: #fff; resize: vertical;
    border-radius: 0 0 5px 5px; border-top: 1px solid #ddd; margin-top: -1px;
    min-height: 400px; display: none; /* Initially hidden */
}
#translation-edit-area:focus { outline: none; box-shadow: inset 0 0 5px rgba(0,0,0,0.1); }

/* Loading Indicator */
#translation-loading { text-align: center; margin: 20px 0; color: #555; font-style: italic; display: none; padding: 15px; }
#translation-loading .loading-spinner { vertical-align: middle; margin-right: 8px; border-color: rgba(0,0,0,0.1); border-top-color: #ff9800; display: inline-block; width: 18px; height: 18px; border-width: 3px; border-style: solid; border-radius: 50%; animation: spin 1s linear infinite; }
@keyframes spin { to { transform: rotate(360deg); } }


/* Action Buttons Area */
#report .report-actions { margin-top: 25px; padding-top: 20px; border-top: 1px solid #eee; text-align: center; display: flex; flex-wrap: wrap; justify-content: center; gap: 10px; }
#report .report-actions button { min-width: 140px; }


/* === Notifications === */
#notifications { position: fixed; bottom: 20px; right: 20px; z-index: 1000; max-width: 300px; }
.notification { background-color: #34495e; color: white; padding: 12px 18px; margin-bottom: 10px; border-radius: 5px; box-shadow: 0 3px 8px rgba(0,0,0,0.2); opacity: 0.95; transition: opacity 0.5s ease, transform 0.5s ease; font-size: 0.95em; }
.notification.success { background-color: #27ae60; }
.notification.error { background-color: #c0392b; }
.notification.info { background-color: #2980b9; }


/* === Print Styles === */
@media print {
    body { margin: 0; font-size: 10pt; background-color: #fff !important; color: #000 !important; -webkit-print-color-adjust: exact !important; print-color-adjust: exact !important; }
    /* Hide UI */
    .container > h1, .tab-container, button:not(.print-me), #notifications, .form-group label:not(.caption),
    #templates, .image-preview-container, .lesion-item .remove-lesion-btn, .suggestion-button-container,
    #report .report-header, /* Hide headers within report tab for print */
    #translation-loading, #edit-translation-btn, #translation-edit-area,
    #report .report-actions /* Hide action buttons */
     { display: none !important; }

    /* Ensure only the printed content's container is visible */
    /* This is handled by the print helper function creating a new window/iframe */

    /* Base styles for printed content (applied via print helper) */
    .printable-content { /* Assume print helper adds this class */
        font-family: 'Times New Roman', Times, serif !important;
        font-size: 10pt !important;
        line-height: 1.4 !important;
        color: #000 !important;
    }
    .printable-content h2, .printable-content h3, .printable-content h4 {
        font-family: Arial, sans-serif !important;
        font-weight: bold !important;
        page-break-after: avoid !important;
        color: #000 !important;
    }
    .printable-content h2.report-title { text-align: center; font-size: 1.3em; }
    .printable-content h3.report-section-title { font-size: 1.1em; border-bottom: 1px solid #999; margin-bottom: 0.5em; padding-bottom: 0.2em;}
    .printable-content p { orphans: 3; widows: 3; margin: 0.4em 0; }
    .printable-content strong { font-weight: bold !important; }
    .printable-content hr.report-hr { border: none !important; border-top: 1px solid #ccc !important; margin: 1em 0 !important; }
    .printable-content .report-section { page-break-inside: avoid !important; margin-bottom: 1em !important; }
    .printable-content .report-lesion-item { page-break-inside: avoid !important; margin-bottom: 0.7em !important; padding-left: 1em !important; }
    /* Image layout in print */
    .printable-content .report-images-section .image-flex-container { display: flex !important; flex-wrap: wrap !important; justify-content: space-between !important; gap: 8mm !important; }
    .printable-content .report-image-item { flex: 0 1 calc(50% - 4mm) !important; box-sizing: border-box !important; text-align: center !important; page-break-inside: avoid !important; margin-bottom: 8mm !important; }
    .printable-content .report-image-item img { max-width: 100% !important; border: 1px solid #999 !important; }
    .printable-content .report-image-item .caption { font-size: 8pt !important; color: #222 !important; }
    /* Footer */
    .printable-content .report-footer { margin-top: 1.5em !important; font-size: 9pt !important; color: #222 !important; text-align: center !important; border-top: 1px solid #999 !important; padding-top: 0.8em !important; }
    .printable-content .end-of-report { font-weight: bold !important; }
    /* Markdown lists/breaks */
     ul, ol { margin: 0.5em 0 1em 0; padding-left: 25px; }
     li { margin-bottom: 0.3em; page-break-inside: avoid; }
     br { display: block !important; content: "" !important; margin-bottom: 0.6em !important; }
     pre { white-space: pre-wrap !important; word-wrap: break-word !important; font-family: 'Courier New', monospace !important; font-size: 10pt !important; }
    /* Page Setup */
    @page { size: A4; margin: 15mm; }

    a[href]:after { content: none !important; } /* Don't print URLs */
}

// js/core/form-core.js
// Provides basic form handling utilities.

/**
 * Validates a single form field (example).
 * @param {HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement} field - The form field element.
 * @returns {boolean} - True if valid, false otherwise.
 */
export function validateField(field) {
    // Basic required check (can be expanded)
    if (field.required && !field.value.trim()) {
        // console.warn(`Validation failed: Field ${field.name || field.id} is required.`);
        field.style.borderColor = 'red';
        return false;
    }
    // Add other checks like pattern, min/max length etc.
    field.style.borderColor = ''; // Reset border color if valid
    return true;
}

/**
 * Validates all required fields within a form or container.
 * @param {string | HTMLElement} containerSelectorOrElement - A CSS selector for the container or the element itself.
 * @returns {boolean} - True if all required fields are valid, false otherwise.
 */
export function validateForm(containerSelectorOrElement) {
    const container = typeof containerSelectorOrElement === 'string'
        ? document.querySelector(containerSelectorOrElement)
        : containerSelectorOrElement;

    if (!container) {
        console.error("[validateForm] Validation failed: Container element not found.");
        return false;
    }

    let isValid = true;
    // Query for elements that might have validation rules (e.g., required)
    const fieldsToValidate = container.querySelectorAll('input[required], select[required], textarea[required]');

    fieldsToValidate.forEach(field => {
        if (!validateField(field)) {
            isValid = false;
        }
    });

    // console.log(`[validateForm] Validation result for ${container.id || 'container'}: ${isValid}`);
    return isValid;
}

/**
 * Checks if a value is within a normal range (example).
 * @param {number} value - The value to check.
 * @param {number} min - The minimum normal value.
 * @param {number} max - The maximum normal value.
 * @returns {boolean} - True if within range.
 */
export function checkNormalRange(value, min, max) {
    const numValue = parseFloat(value);
    if (isNaN(numValue)) return false; // Not a number
    return numValue >= min && numValue <= max;
}

/**
 * Populates form fields within a container element with data from an object.
 * Matches object keys to form field 'name' attributes using querySelector.
 * Handles inputs, selects, textareas, checkboxes, radios.
 * @param {string | HTMLElement} containerSelectorOrElement - The container selector or element (can be a form or any other element like a DIV).
 * @param {object} data - The data object.
 * @param {object} [options] - Optional settings.
 * @param {boolean} [options.dispatchEvents=true] - Whether to dispatch 'change' and 'input' events after setting values.
 */
export function populateForm(containerSelectorOrElement, data, options = {}) {
    const container = typeof containerSelectorOrElement === 'string'
        ? document.querySelector(containerSelectorOrElement)
        : containerSelectorOrElement;

    if (!container || typeof data !== 'object' || data === null) {
        console.error("[populateForm] Cannot populate form. Invalid container element or data provided.", { container: containerSelectorOrElement, data });
        return; // Stop execution if container or data is invalid
    }

    const dispatchEvents = options.dispatchEvents !== false; // Default to true

    console.log(`[populateForm] Populating container '${container.id || container.tagName}' with data (dispatchEvents: ${dispatchEvents}):`, JSON.parse(JSON.stringify(data))); // Log a copy to avoid showing mutated data if happens elsewhere

    for (const key in data) {
        // Only process own properties of the data object
        if (Object.prototype.hasOwnProperty.call(data, key)) {

            // *** FIX: Use querySelector scoped within the container. Do NOT use .elements ***
            // This finds the first element within the container matching the name.
            const field = container.querySelector(`[name="${key}"]`);

            // Proceed only if a field with that name is found within the container
            if (field) {
                // Wrap assignment in try/catch for detailed error logging per field
                try {
                    const value = data[key];
                    // Log exactly what is about to be set
                    console.debug(`[populateForm] Attempting assignment for key "${key}" | Field found: [Name: ${field.name}, Type: ${field.type}, Tag: ${field.tagName}] | Value:`, value);

                    // Handle different field types
                    if (field.type === 'checkbox') {
                        field.checked = Boolean(value);
                    } else if (field.type === 'radio') {
                        // For radios, query specifically for the one with the matching value within the container
                        const radioToSelect = container.querySelector(`input[name="${key}"][value="${value}"]`);
                        if (radioToSelect) {
                            radioToSelect.checked = true;
                        } else {
                            // Uncheck all radios in the group if the value doesn't match any
                            container.querySelectorAll(`input[name="${key}"]`).forEach(r => r.checked = false);
                            // console.warn(`[populateForm] Radio value "${value}" not found for name "${key}". Unchecking group.`);
                        }
                    } else if (field.tagName === 'SELECT' && field.multiple) {
                        // Handle multi-select
                        if (Array.isArray(value)) {
                            const options = field.options;
                            // console.debug(`[populateForm] Setting multi-select '${key}'. Data values:`, value);
                            for (let i = 0; i < options.length; i++) {
                                // Check if the current option's value exists in the data array
                                options[i].selected = value.includes(options[i].value);
                                // console.debug(`  Option value: ${options[i].value}, Included in data: ${value.includes(options[i].value)}, Selected: ${options[i].selected}`);
                            }
                        } else {
                            // console.warn(`[populateForm] Data for multi-select '${key}' is not an array. Clearing selection. Data:`, value);
                            Array.from(field.options).forEach(opt => opt.selected = false);
                        }
                    } else {
                        // Standard input, select-one, textarea, hidden etc.
                        // Ensure value is not null/undefined before assigning
                        field.value = value !== null && value !== undefined ? value : '';
                    }

                    // Conditionally dispatch events AFTER value assignment attempt
                    if (dispatchEvents) {
                        // console.debug(`[populateForm] Dispatching events for key "${key}"`);
                        field.dispatchEvent(new Event('change', { bubbles: true }));
                        field.dispatchEvent(new Event('input', { bubbles: true }));
                    }
                } catch (error) {
                    // Log the specific key/value/field that caused the error
                    console.error(`[populateForm] CRITICAL ERROR processing key "${key}" with value:`, data?.[key], ` for field:`, field, ` | Error:`, error);
                    // Re-throw the error to make it visible in the call stack and potentially stop further processing
                    throw error;
                }
            } else {
                // Log warning if field not found, excluding expected non-field keys
                if (key !== 'lesions' && key !== 'id' && key !== 'number' && key !== 'formatReportSectionHtml') {
                    // console.warn(`[populateForm] Form field with name '${key}' not found in container '${container.id || container.tagName}'.`);
                }
            }
        } // end hasOwnProperty
    } // end for..in loop
    // console.log(`[populateForm] Finished populating container '${container.id || container.tagName}'.`);
}


/**
 * Gathers data from form fields within a container element into an object.
 * Uses querySelectorAll to find named elements within the container.
 * @param {string | HTMLElement} containerSelectorOrElement - The container selector or element.
 * @returns {object} - An object containing form data {fieldName: value}.
 */
export function getFormData(containerSelectorOrElement) {
    const container = typeof containerSelectorOrElement === 'string'
        ? document.querySelector(containerSelectorOrElement)
        : containerSelectorOrElement;

    if (!container) {
        console.error("[getFormData] Cannot get form data. Container element not found for selector:", containerSelectorOrElement);
        return {};
    }

    const formData = {};
    // Query all relevant, named form elements *within the specific container*
    const elements = container.querySelectorAll('input[name], select[name], textarea[name]');

    elements.forEach(field => {
        const name = field.name;

        // Skip disabled, buttons, or elements inside a nested template tag
        if (field.disabled || field.type === 'button' || field.type === 'submit' || field.type === 'reset' || field.tagName === 'FIELDSET' || field.closest('template')) {
            return; // continue to next element in forEach
        }

        switch (field.type) {
            case 'checkbox':
                formData[name] = field.checked;
                break;
            case 'radio':
                if (field.checked) {
                    formData[name] = field.value;
                } else if (!formData.hasOwnProperty(name)) {
                    // Initialize key if no radio in the group is checked yet
                    formData[name] = null;
                }
                break;
            case 'select-multiple':
                // Ensure field is treated as the select element itself
                const selectedOptions = [];
                if (field.tagName === 'SELECT') {
                    for (let j = 0; j < field.options.length; j++) {
                        if (field.options[j].selected) {
                            selectedOptions.push(field.options[j].value);
                        }
                    }
                }
                formData[name] = selectedOptions;
                break;
            case 'file':
                // Skip file inputs
                break;
            default: // text, number, date, textarea, select-one, hidden, password, email, url, tel, search, color
                if (field.type !== 'radio') { // Avoid overwriting checked radio value
                     formData[name] = field.value;
                }
        }
    });
    // console.log(`[getFormData] Data gathered from container '${container.id || container.tagName}':`, formData);
    return formData;
}

console.log("form-core.js loaded v4");

// js/core/report-core.js
// Handles report generation, preview, translation, editing, printing, and exporting.

import { getFormData } from './form-core.js';
import { getUploadedImageData } from '../modules/image-handler.js';
import { showNotification } from './ui-core.js';
// Import translation function and config getters
import { translateReportViaApi } from '../modules/report-translator.js';
import { getApiKey, getTranslationPrompt } from '../main.js'; // Assuming getters are exported

// --- Module Scope Variables ---
let generatedReportHtml = '';       // Stores the latest generated English report HTML
let currentPatientData = {};        // Stores patient data for the current report
let currentTranslationMarkdown = '';// Stores the latest translation Markdown (original or edited)
let isEditingTranslation = false;   // Tracks if translation edit mode is active

// --- Helper Functions defined at module scope FIRST ---

/**
 * Formats the complete English report as an HTML string.
 * Removes Technical Details, Adds new Footer with Reporting Doctor.
 * @param {object} patientData - Patient information object (should include reportingDoctor).
 * @param {object} organData - Organ-specific data object (must have formatReportSectionHtml method).
 * @param {Array<object>} images - Array of image objects with { name, dataUrl }.
 * @returns {string} Formatted HTML report string.
 * @throws {Error} If formatting fails or organData is invalid.
 */
function formatReportAsHtml(patientData, organData, images) {
    console.log("[ReportCore] Formatting English report as HTML...");
    if (!organData || typeof organData.formatReportSectionHtml !== 'function') {
        console.error("[ReportCore] Invalid organData or missing formatReportSectionHtml method.");
        throw new Error("Internal error: Cannot format report findings section.");
    }

    let report = `<div class="report-container">`; // Outer container for styling/print

    // Title
    report += `<h2 class="report-title">ULTRASOUND REPORT - THYROID</h2><hr class="report-hr">`;

    // Patient Information Section
    report += `<div class="report-section">
    <h3 class="report-section-title">PATIENT INFORMATION / THÔNG TIN BỆNH NHÂN</h3>
    <p><strong>Name / Họ Tên:</strong> ${patientData.patientName || 'N/A'}</p>
    <p><strong>Patient ID / Mã BN:</strong> ${patientData.patientId || 'N/A'}</p>
    <p><strong>Date of Birth / Ngày sinh:</strong> ${patientData.patientDob || 'N/A'}</p>
    <p><strong>Exam Date / Ngày khám:</strong> ${patientData.examDate || 'N/A'}</p>
    <p><strong>Requesting Dr / BS Chỉ định:</strong> ${patientData.requestingPhysician || 'N/A'}</p>
    <p><strong>Reason for Exam / Lý do khám:</strong> ${patientData.reason ? patientData.reason.replace(/\n/g, '<br>') : 'N/A'}</p>
    </div><hr class="report-hr">`;

    // --- TECHNICAL DETAILS SECTION REMOVED ---

    // Findings Section (Delegated Call)
    report += `<div class="report-section report-findings-section">
                <h3 class="report-section-title">FINDINGS</h3>
                ${ organData.formatReportSectionHtml() /* Call the method from organData */ }
            </div><hr class="report-hr">`;

    // Impression Section
    report += `<div class="report-section">
                <h3 class="report-section-title">IMPRESSION</h3>
                <p>${organData.impression ? organData.impression.replace(/\n/g, '<br>') : 'No overall impression provided.'}</p>
            </div><hr class="report-hr">`;

    // Images Section
    const validImages = images.filter(img => img.dataUrl && img.dataUrl.startsWith('data:image/'));
    if (validImages.length > 0) {
        console.log(`[ReportCore] Formatting image section with ${validImages.length} valid images.`);
        report += `
    <div class="report-section report-images-section">
        <h3 class="report-section-title">IMAGES</h3>
        <div class="image-flex-container">`; // Flex container
        validImages.forEach((img, index) => {
            report += `
            <div class="report-image-item">
                <img src="${img.dataUrl}" alt="Ultrasound Image ${index + 1}" title="${img.name || `Image ${index + 1}`}" style="object-fit: contain; max-width: 100%; max-height: 100%; display: block; margin: auto;">
                <p class="caption">${img.name || `Image ${index + 1}`}</p>
            </div>`;
        });
        report += `
        </div> </div><hr class="report-hr">`;
    }

    // --- NEW FOOTER ---
    report += `
    <div class="report-footer signature-section">
        <p class="signature-title">Bác sĩ siêu âm</p>
        <div class="signature-space"></div> <p class="signature-name">${patientData.reportingDoctor || '[ Họ tên bác sĩ siêu âm ]'}</p>
    </div>`;

    report += `</div>`; // Close report-container
    return report;
}

/**
 * Generates the full Vietnamese report HTML string dynamically for printing.
 * Removes Technical Details, Adds new Footer with Reporting Doctor.
 * @param {object} patientData - Includes reportingDoctor.
 * @param {string} translatedBodyHtml - HTML string of translated findings/impression (parsed from Markdown).
 * @param {Array<object>} images - Array of image objects { name, dataUrl }.
 * @returns {string} Complete Vietnamese HTML report string for printing.
 */
function generateVietnameseReportHtmlForPrint(patientData, translatedBodyHtml, images) {
    console.log("[ReportCore] Generating Vietnamese HTML report structure for printing...");
    let report = `<div class="report-container">`;
    // Title (Vietnamese)
    report += `<h2 class="report-title">BÁO CÁO SIÊU ÂM - TUYẾN GIÁP</h2><hr class="report-hr">`;
    // Patient Info (Vietnamese Labels)
    report += `<div class="report-section">
                <h3 class="report-section-title">THÔNG TIN BỆNH NHÂN</h3>
                <p><strong>Họ Tên:</strong> ${patientData.patientName || 'N/A'}</p>
                <p><strong>Mã BN:</strong> ${patientData.patientId || 'N/A'}</p>
                <p><strong>Ngày sinh:</strong> ${patientData.patientDob || 'N/A'}</p>
                <p><strong>Ngày khám:</strong> ${patientData.examDate || 'N/A'}</p>
                <p><strong>BS Chỉ định:</strong> ${patientData.requestingPhysician || 'N/A'}</p>
                <p><strong>Lý do khám:</strong> ${patientData.reason ? patientData.reason.replace(/\n/g, '<br>') : 'N/A'}</p>
            </div><hr class="report-hr">`;

    // --- TECHNICAL DETAILS REMOVED ---

    // Translated Content Section
    report += `<div class="report-section report-findings-section">
                <h3 class="report-section-title">KẾT QUẢ SIÊU ÂM</h3>
                ${ translatedBodyHtml || '<p><i>Nội dung dịch không có sẵn.</i></p>' }
            </div><hr class="report-hr">`;

    // Images Section (Same structure as English version)
    const validImages = images.filter(img => img.dataUrl?.startsWith('data:image/'));
    if (validImages.length > 0) {
        console.log(`[ReportCore] Adding ${validImages.length} images to Vietnamese print version.`);
        report += `
    <div class="report-section report-images-section">
        <h3 class="report-section-title">HÌNH ẢNH</h3>
        <div class="image-flex-container">`;
        validImages.forEach((img, index) => {
            report += `
            <div class="report-image-item">
                <img src="${img.dataUrl}" alt="Hình Siêu âm ${index + 1}" title="${img.name || `Hình ${index + 1}`}" style="object-fit: contain; max-width: 100%; max-height: 100%; display: block; margin: auto;">
                <p class="caption">${img.name || `Hình ${index + 1}`}</p>
            </div>`;
        });
        report += `
        </div> </div><hr class="report-hr">`;
    }

    // --- NEW FOOTER ---
    report += `
    <div class="report-footer signature-section">
        <p class="signature-title">Bác sĩ siêu âm</p>
        <div class="signature-space"></div>
        <p class="signature-name">${patientData.reportingDoctor || '[ Họ tên bác sĩ siêu âm ]'}</p>
    </div>`;

    report += `</div>`; // Close report-container
    console.log("[ReportCore] Vietnamese HTML for print generated.");
    return report;
}

/**
 * Opens a print dialog for given HTML content with A4 styling,
 * including specific image formatting for 2-column, 16:9 fitting.
 * @param {string} htmlContent - The HTML string to print (either full EN or full VI report).
 * @param {string} title - The title for the print window.
 */
// MODIFIED printPreparedHtml function in report-core.js
// Focus on reducing vertical space and disabling page-break-inside for sections/images

function printPreparedHtml(htmlContent, title = 'Print Report') {
    try {
        const printWindow = window.open('', '_blank');
        if (!printWindow) { showNotification("Popup blocker may be active.", "error"); return; }

        printWindow.document.write(`
            <!DOCTYPE html><html lang="vi"><head><meta charset="UTF-8"><title>${title}</title>
            <style>
                /* === Embedded Print Styles - Reduced Spacing === */
                @page {
                    size: A4;
                    margin: 15mm; /* Standard A4 margins */
                }

                body {
                    margin: 0 !important;
                    padding: 0 !important; /* Reset body padding */
                    font-family: 'Times New Roman', Times, serif;
                    line-height: 1.3; /* Reduced */
                    color: #000;
                    background: #fff !important;
                    font-size: 10pt;
                    -webkit-print-color-adjust: exact !important;
                    print-color-adjust: exact !important;
                }

                /* Basic elements - Reduced Margins */
                p {
                    margin: 0.1em 0 0.4em 0 !important; /* Significantly reduced paragraph margins */
                    orphans: 3;
                    widows: 3;
                }
                strong { font-weight: bold; }
                hr.report-hr { border: none; border-top: 1px solid #ccc; margin: 0.6em 0; } /* Reduced hr margin */

                /* Headings - Reduced Margins */
                h2, h3, h4 {
                    margin: 0.5em 0 0.2em 0 !important; /* Reduced heading margins */
                    padding: 0;
                    font-family: Arial, sans-serif;
                    page-break-after: avoid; /* Keep avoid after headings */
                    font-weight: bold;
                }
                h2.report-title { text-align: center; font-size: 1.3em; margin-bottom: 0.6em; }
                h3.report-section-title { font-size: 1.1em; border-bottom: 1px solid #999; margin-bottom: 0.3em; padding-bottom: 0.15em;}

                /* Report Structure - Reduced Margins & TEST: Page Break Avoid Disabled */
                .report-container { width: 100%; }
                .report-section {
                    margin-bottom: 0.6em !important; /* Reduced section margin */
                    /* page-break-inside: avoid !important; */ /* *** TEST: DISABLED *** */
                }
                .report-lesion-item {
                    margin-bottom: 0.4em !important; /* Reduced lesion margin */
                    padding-left: 0.8em !important;
                    border-left: 1px solid #ddd;
                     /* page-break-inside: avoid !important; */ /* *** TEST: DISABLED *** */
                }

                /* Image Print Styles - Reduced Margins/Gaps & TEST: Page Break Avoid Disabled */
                .report-images-section .image-flex-container {
                    display: flex; flex-wrap: wrap; justify-content: space-between;
                    gap: 5mm !important; /* Reduced gap */
                    margin-top: 0.4em !important;
                }
                .report-image-item {
                    flex: 0 1 calc(50% - 3mm); box-sizing: border-box; text-align: center;
                    /* page-break-inside: avoid !important; */ /* *** TEST: DISABLED *** */
                    margin-bottom: 5mm !important; /* Reduced bottom margin */
                    border: 1px solid #ccc; padding: 2mm; background-color: #fdfdfd;
                    overflow: hidden; /* Keep overflow hidden */
                    /* Remove fixed height, use max-height only */
                    /* height: 49mm; */
                    max-height: 47mm; /* Adjusted max-height slightly */
                    display: flex; flex-direction: column; justify-content: center; align-items: center;
                }
                .report-image-item img {
                    display: block; max-width: 100%; height: auto; max-height: 44mm; /* Max height for image itself */
                    object-fit: contain; margin: 0 auto 1mm auto;
                }
                .report-image-item .caption { font-size: 8pt; color: #333; margin-top: 0; line-height: 1.1; }

                /* Signature Styles - Reduced Margins */
                .signature-section { margin-top: 10mm !important; text-align: center; page-break-inside: avoid; } /* Keep avoid here */
                .signature-title { font-size: 10pt; margin-bottom: 1.5mm; font-weight: bold;}
                .signature-space { height: 12mm; margin-bottom: 1.5mm; border-bottom: 1px dotted #aaa; width: 60%; margin-left: auto; margin-right: auto; }
                .signature-name { font-size: 10pt; font-weight: bold; margin-top: 0; }

                /* Footer Styles - Reduced Margins */
                .report-footer { margin-top: 1em !important; font-size: 9pt; color: #333; text-align: center; border-top: 1px solid #ccc; padding-top: 0.5em !important; }
                .end-of-report { font-weight: bold; }

                /* Markdown generated styles - Reduced Margins/Padding */
                ul, ol { margin: 0.2em 0 0.5em 0 !important; padding-left: 18px !important; }
                li { margin-bottom: 0.1em !important; page-break-inside: avoid; } /* Keep avoid for list items */
                pre { white-space: pre-wrap; word-wrap: break-word; font-family: 'Courier New', monospace; font-size: 10pt; margin: 0.5em 0 !important; }

                /* Hide URLs */
                a[href]:after { content: none !important; }

                /* Minimal BR spacing */
                br { margin: 0 !important; padding: 0 !important; height: 0 !important; line-height: 0.1em !important; content: "" !important; display: block !important; }

            </style>
            </head><body>
        `);
        // Write the actual report content passed to the function
        // Adding a wrapper div for safety, though body styling should apply
        printWindow.document.write(`<div class="printable-content">${htmlContent}</div>`);
        printWindow.document.write('</body></html>');
        printWindow.document.close();
        printWindow.focus();
        setTimeout(() => {
            try {
                if (!printWindow.closed) {
                    printWindow.print();
                    setTimeout(() => { if (!printWindow.closed) printWindow.close(); }, 2000);
                }
            } catch (e) { console.error("Error during print()/close():", e); if (!printWindow.closed) printWindow.close(); }
        }, 750);
    } catch (e) {
        console.error("Error creating print window:", e);
        showNotification("Failed to create print window. Check popup blocker.", "error");
    }
}

/**
 * Exports the English report HTML as a downloadable .html file with embedded styles.
 * @param {string} reportHtml - The HTML content string of the English report body.
 * @param {string} filename - Suggested filename.
 */
function exportReportAsHtml(reportHtml, filename = 'ultrasound-report.html') {
    // (Implementation remains the same - wraps reportHtml in boilerplate + styles)
     const fullHtml = `<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>${filename.replace('.html', '')}</title><style>body{margin:20px;font-family:Arial,sans-serif;line-height:1.4;}.report-container{max-width:800px;margin:auto;border:1px solid #eee;padding:15px;background-color:#fff;}p{margin:0.5em 0;}strong{font-weight:bold;}h2,h3,h4{margin:0.8em 0 0.4em 0;padding:0;font-family:Arial,sans-serif;}hr.report-hr{border:none;border-top:1px solid #eee;margin:1em 0;}.report-title{text-align:center;font-size:1.3em;font-weight:bold;}.report-section{margin-bottom:1em;}.report-section-title{font-size:1.1em;font-weight:bold;border-bottom:1px solid #ccc;margin-bottom:0.5em;padding-bottom:0.2em;}.report-lesion-item{margin-bottom:0.8em;padding-left:1em;border-left:2px solid #f0f0f0;}.report-images-section .image-flex-container{display:flex;flex-wrap:wrap;justify-content:flex-start;gap:15px;margin-top:10px;}.report-image-item{flex:0 1 calc(50% - 10px);box-sizing:border-box;text-align:center;margin-bottom:10px;}.report-image-item img{max-width:100%;max-height:100%;object-fit:contain;display:block;margin:0 auto 5px auto;border:1px solid #ccc;}.report-image-item .caption{font-size:9pt;color:#555;margin-top:0;word-wrap:break-word;}.signature-section{margin-top:40px;text-align:center;}.signature-title{font-weight:bold;margin-bottom:5px;font-size:11pt;}.signature-space{height:50px;margin-bottom:5px;}.signature-name{font-weight:bold;margin-top:0;font-size:11pt;}.report-footer{margin-top:1.5em;font-size:9pt;color:#444;text-align:center;border-top:1px solid #ccc;padding-top:1em;}.end-of-report{display:none;}</style></head><body>${reportHtml}</body></html>`;
    const blob = new Blob([fullHtml], { type: 'text/html;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    console.log(`[ReportCore] Report exported as ${filename}`);
}

// --- Main Initialization Function ---
/**
 * Initializes the report system event listeners and logic.
 */
export function initReportSystem() {
    // Get references to ALL needed DOM elements
    const generateBtn = document.getElementById('generate-report-btn');
    const printBtn = document.getElementById('print-report-btn');
    const exportBtn = document.getElementById('export-report-html-btn'); // Stays HTML export
    const translateBtn = document.getElementById('translate-report-btn');
    const printTranslationBtn = document.getElementById('print-translation-btn');
    const reportPreview = document.getElementById('report-preview');
    const translationSection = document.getElementById('translation-section');
    const translationContent = document.getElementById('translation-content');
    const translationEditArea = document.getElementById('translation-edit-area');
    const editTranslationBtn = document.getElementById('edit-translation-btn');
    const translationLoading = document.getElementById('translation-loading');

    // Initial check for element existence
    const requiredElements = { generateBtn, printBtn, exportBtn, translateBtn, printTranslationBtn, reportPreview, translationSection, translationContent, translationEditArea, editTranslationBtn, translationLoading };
    for (const key in requiredElements) {
        if (!requiredElements[key]) {
            console.error(`[ReportCore] Initialization failed: Element with ID matching '${key}' not found.`);
            showNotification(`Report UI element missing: ${key}. Please check HTML.`, "error");
            // return; // Stop initialization if a critical element is missing
        }
    }
    console.log("[ReportCore] All required report UI elements found.");

    // --- Generate Report Button Listener ---
    generateBtn.addEventListener('click', async () => {
        console.log("[ReportCore] Generate Report button clicked.");
        // 1. Reset UI State
        reportPreview.innerHTML = '<p class="placeholder-text"><i>Generating report...</i></p>';
        translationSection.style.display = 'none';
        translationContent.innerHTML = '';
        translationEditArea.value = '';
        translationEditArea.style.display = 'none';
        editTranslationBtn.style.display = 'none';
        editTranslationBtn.innerHTML = '<i class="fas fa-edit"></i> Sửa bản dịch';
        editTranslationBtn.classList.remove('editing');
        printTranslationBtn.style.display = 'none';
        printBtn.style.display = 'none';
        exportBtn.style.display = 'none';
        translateBtn.style.display = 'none';
        generatedReportHtml = '';
        currentPatientData = {};
        currentTranslationMarkdown = '';
        isEditingTranslation = false;

        // --- 2. Data Collection & Formatting ---
        try {
            // Collect data (including reportingDoctor from patient info form)
            currentPatientData = getFormData('#patient-info-form');
            if (!currentPatientData.reportingDoctor) {
                 // Optionally warn if doctor name is missing but not required by form
                 console.warn("[ReportCore] Reporting doctor name is empty.");
            }

            let organData = {};
            try {
                const { collectThyroidData } = await import('../organs/thyroid/thyroid-module.js');
                organData = collectThyroidData();
                if (!organData?.formatReportSectionHtml) throw new Error("Organ data formatter missing.");
            } catch (organError) { throw new Error(`Findings data error: ${organError.message}`); }

            const images = getUploadedImageData(true);
            generatedReportHtml = formatReportAsHtml(currentPatientData, organData, images); // Call EN formatter
            console.log("[ReportCore] Report HTML generated.");

            // --- 3. Display Report ---
            reportPreview.innerHTML = generatedReportHtml;
            console.log("[ReportCore] Report preview updated.");

            // --- 4. Show Action Buttons ---
            printBtn.style.display = 'inline-block';
            exportBtn.style.display = 'inline-block';
            if (getApiKey() && getTranslationPrompt()) {
                translateBtn.style.display = 'inline-block';
            } else { console.warn("Translate button hidden: Config missing."); }
            showNotification("Report generated successfully!", "success");

        } catch (error) {
            console.error("[ReportCore] Error during report generation:", error);
            reportPreview.innerHTML = `<p class="placeholder-text" style="color: red;"><b>Error:</b> ${error.message}</p>`;
            showNotification(`Report Generation Failed: ${error.message}`, 'error', 5000);
        }
    });

    // --- Translate Button Listener ---
    translateBtn.addEventListener('click', async () => {
        console.log("[ReportCore] Translate Report button clicked.");
        if (!generatedReportHtml) { /* ... check prerequisite ... */ return; }
        const apiKey = getApiKey(); const systemPrompt = getTranslationPrompt();
        if (!apiKey || !systemPrompt) { /* ... check config ... */ return; }
        let reportTextContent = '';
        try { /* ... extract text ... */
             const tempDiv = document.createElement('div'); tempDiv.innerHTML = generatedReportHtml;
             reportTextContent = (tempDiv.innerText || tempDiv.textContent || '').trim();
             if (!reportTextContent) throw new Error("Extracted text empty.");
        } catch (extractError){ /* ... handle error ... */ return; }

        // Show Loading, Reset State
        translationSection.style.display = 'block'; translationContent.style.display = 'none'; translationEditArea.style.display = 'none';
        editTranslationBtn.style.display = 'none'; printTranslationBtn.style.display = 'none'; translationLoading.style.display = 'block';
        translateBtn.disabled = true; isEditingTranslation = false; currentTranslationMarkdown = '';

        try { // Call API
            const translatedMarkdown = await translateReportViaApi(reportTextContent, apiKey, systemPrompt);
            currentTranslationMarkdown = translatedMarkdown;

            // Parse and Display
            if (typeof marked !== 'undefined' && marked.parse) {
                marked.setOptions({ breaks: true, gfm: true });
                translationContent.innerHTML = marked.parse(currentTranslationMarkdown);
                translationContent.style.whiteSpace = 'normal';
            } else { /* fallback */ translationContent.innerText = currentTranslationMarkdown; translationContent.style.whiteSpace = 'pre-wrap'; }
            translationContent.style.display = 'block';
            editTranslationBtn.innerHTML = '<i class="fas fa-edit"></i> Sửa bản dịch'; editTranslationBtn.classList.remove('editing');
            editTranslationBtn.style.display = 'inline-block'; printTranslationBtn.style.display = 'inline-block';
            showNotification("Report translated successfully!", "success");
            translationSection.scrollIntoView({ behavior: 'smooth', block: 'nearest'});
        } catch (error) { /* ... handle error ... */ }
        finally { translationLoading.style.display = 'none'; translateBtn.disabled = false; }
    });

    // --- Edit/Save Translation Button Listener ---
    editTranslationBtn.addEventListener('click', () => {
        if (isEditingTranslation) { // Save
            currentTranslationMarkdown = translationEditArea.value;
            if (typeof marked !== 'undefined') { marked.setOptions({ breaks: true, gfm: true }); translationContent.innerHTML = marked.parse(currentTranslationMarkdown); translationContent.style.whiteSpace = 'normal'; }
            else { translationContent.innerText = currentTranslationMarkdown; translationContent.style.whiteSpace = 'pre-wrap'; }
            translationEditArea.style.display = 'none'; translationContent.style.display = 'block';
            editTranslationBtn.innerHTML = '<i class="fas fa-edit"></i> Sửa bản dịch'; editTranslationBtn.classList.remove('editing');
            isEditingTranslation = false; showNotification("Translation updated.", "success");
        } else { // Edit
            if (!currentTranslationMarkdown) { return; }
            translationEditArea.value = currentTranslationMarkdown;
            translationContent.style.display = 'none'; translationEditArea.style.display = 'block';
            editTranslationBtn.innerHTML = '<i class="fas fa-save"></i> Lưu bản dịch'; editTranslationBtn.classList.add('editing');
            isEditingTranslation = true; translationEditArea.focus();
        }
    });

    // --- Print Original Report (EN) Button Listener ---
    printBtn.addEventListener('click', () => {
        if (generatedReportHtml) {
            printPreparedHtml(generatedReportHtml, `Ultrasound Report - ${currentPatientData?.patientId || ''}`);
        } else { showNotification("Please generate the report first.", "info"); }
    });

    // --- Print Translation (VI) Button Listener ---
    printTranslationBtn.addEventListener('click', () => {
        if (currentTranslationMarkdown) {
             let translatedBodyHtml = ''; // This is just the FINDINGS+IMPRESSION block typically
             if (typeof marked !== 'undefined') { marked.setOptions({ breaks: true, gfm: true }); translatedBodyHtml = marked.parse(currentTranslationMarkdown); }
             else { translatedBodyHtml = `<pre>${currentTranslationMarkdown.replace(/</g,"&lt;")}</pre>`; }
             const images = getUploadedImageData(true);
             // Generate the FULL VI HTML structure for printing
             const vietnameseReportHtml = generateVietnameseReportHtmlForPrint(currentPatientData, translatedBodyHtml, images);
             printPreparedHtml(vietnameseReportHtml, `Báo cáo Siêu âm (VI) - ${currentPatientData?.patientId || ''}`);
        } else { showNotification("No translation available to print.", "info"); }
    });

    // --- Export HTML Button Listener (Exports English version) ---
    exportBtn.addEventListener('click', () => {
         if (generatedReportHtml) {
             const patientId = currentPatientData?.patientId || 'UnknownID';
             const examDate = currentPatientData?.examDate || new Date().toISOString().split('T')[0];
             const filename = `Ultrasound_Report_${patientId}_${examDate}.html`;
             exportReportAsHtml(generatedReportHtml, filename); // Calls export helper
         } else { showNotification("Please generate the report first.", "info"); }
     });

} // === End of initReportSystem ===


// js/core/template-core.js
// Manages saving, loading, and deleting report templates using localStorage.

import { showNotification } from './ui-core.js';
import { populateForm, getFormData } from './form-core.js';
// Import presets if they are defined in JS
import { thyroidPresets } from '../organs/thyroid/thyroid-presets.js';

const TEMPLATE_STORAGE_KEY = 'ultrasoundReportTemplates_v1'; // Changed key to avoid conflicts
const PRESET_INDICATOR = '[Preset] ';

/**
 * Initializes the template system UI elements (dropdowns, buttons).
 */
export function initTemplateSystem() {
    const saveBtn = document.getElementById('save-template-btn');
    const loadBtn = document.getElementById('load-template-btn');
    const deleteBtn = document.getElementById('delete-template-btn');
    const templateSelect = document.getElementById('load-template-select');
    const templateNameInput = document.getElementById('template-name');

    if (saveBtn && templateNameInput) {
        saveBtn.addEventListener('click', () => {
            const name = templateNameInput.value.trim();
            if (name && !name.startsWith(PRESET_INDICATOR)) {
                 // Collect data from ALL relevant forms/modules
                 collectAndSaveTemplate(name);
            } else {
                showNotification('Please enter a valid template name (cannot start with "[Preset] ").', 'error');
            }
        });
    }

    if (loadBtn && templateSelect) {
        loadBtn.addEventListener('click', () => {
            const selectedValue = templateSelect.value;
            if (selectedValue) {
                loadTemplate(selectedValue);
            } else {
                showNotification('Please select a template to load.', 'info');
            }
        });
    }

     if (deleteBtn && templateSelect) {
         deleteBtn.addEventListener('click', () => {
             const selectedValue = templateSelect.value;
             if (selectedValue && !selectedValue.startsWith(PRESET_INDICATOR)) { // Can't delete presets
                 if (confirm(`Are you sure you want to delete the template "${selectedValue}"?`)) {
                     deleteTemplate(selectedValue);
                 }
             } else if (selectedValue.startsWith(PRESET_INDICATOR)) {
                 showNotification('Preset templates cannot be deleted.', 'info');
             } else {
                  showNotification('Please select a user-saved template to delete.', 'info');
             }
         });
     }

    // Initial population of the select dropdown
    populateTemplateDropdown();
    console.log("Template system UI initialized.");
}

/**
 * Collects data from relevant forms/modules and saves it as a template.
 * @param {string} name - The name for the template.
 */
async function collectAndSaveTemplate(name) {
     try {
        // Get data from standard forms
        const patientData = getFormData('#patient-info-form');
        // const basicThyroidData = getFormData('#thyroid-form'); // Less useful, get full data

        // Get detailed data from the active module(s)
        // For now, hardcode thyroid. Later, could check registered/active modules.
        const { collectThyroidData } = await import('../organs/thyroid/thyroid-module.js');
        const fullThyroidData = collectThyroidData();

        // Combine data - structure it clearly, perhaps namespaced by module
        const templateData = {
            // patientInfo: patientData, // Usually don't save patient specifics in templates
            thyroid: fullThyroidData,
            // Add other organs here in the future:
            // breast: breastData,
            // liver: liverData,
            metadata: { // Optional: store info about the template
                name: name,
                createdAt: new Date().toISOString(),
                organ: 'thyroid' // Indicate the primary organ/context
            }
        };

        saveTemplate(name, templateData);
        const templateNameInput = document.getElementById('template-name');
         if(templateNameInput) templateNameInput.value = ''; // Clear name input after save

    } catch (error) {
        console.error("Error collecting data for template:", error);
        showNotification('Failed to collect data for template.', 'error');
    }
}


/**
 * Retrieves all saved templates from localStorage.
 * @returns {object} - An object where keys are template names and values are template data.
 */
function getSavedTemplates() {
    const storedTemplates = localStorage.getItem(TEMPLATE_STORAGE_KEY);
    try {
        return storedTemplates ? JSON.parse(storedTemplates) : {};
    } catch (e) {
        console.error("Error parsing templates from localStorage:", e);
        return {}; // Return empty object on error
    }
}

/**
 * Saves a template to localStorage.
 * @param {string} name - The name of the template.
 * @param {object} data - The template data object to save.
 */
export function saveTemplate(name, data) {
    if (!name || typeof data !== 'object') {
        console.error("Invalid template name or data.");
        showNotification('Failed to save template: Invalid name or data.', 'error');
        return;
    }

    const templates = getSavedTemplates();

     // Prevent overwriting presets (though shouldn't happen with name check)
     if (name.startsWith(PRESET_INDICATOR)) {
         showNotification('Cannot overwrite preset templates.', 'error');
         return;
     }

    // Warn if overwriting existing user template
    if (templates[name]) {
        if (!confirm(`Template "${name}" already exists. Overwrite?`)) {
            return; // User cancelled overwrite
        }
    }

    templates[name] = data;

    try {
        localStorage.setItem(TEMPLATE_STORAGE_KEY, JSON.stringify(templates));
        showNotification(`Template "${name}" saved successfully.`, 'success');
        populateTemplateDropdown(); // Update the dropdown
    } catch (e) {
        console.error("Error saving templates to localStorage:", e);
        showNotification('Failed to save template. Storage might be full.', 'error');
    }
}

/**
 * Loads a template and populates the form(s).
 * @param {string} name - The name of the template to load.
 */
export async function loadTemplate(name) {
    let templateData;
    let isPreset = name.startsWith(PRESET_INDICATOR);
    let actualName = isPreset ? name.substring(PRESET_INDICATOR.length) : name;


    if (isPreset) {
        // Find the preset data (assuming thyroidPresets is structured { name: data })
        templateData = thyroidPresets.find(p => p.name === actualName)?.data;
         console.log(`Loading preset template: ${actualName}`);
    } else {
        const templates = getSavedTemplates();
        templateData = templates[actualName];
         console.log(`Loading user template: ${actualName}`);
    }


    if (templateData) {
        try {
            // Clear existing form data? Optional, maybe prompt user.
            // document.getElementById('patient-info-form').reset();
            // document.getElementById('thyroid-form').reset(); // Basic reset

            // Populate standard forms (if data exists)
            if (templateData.patientInfo) { // Usually excluded from templates
                 // populateForm('#patient-info-form', templateData.patientInfo);
                 console.warn("Skipping population of patient info from template.");
            }

            // Populate organ-specific forms/data
            if (templateData.thyroid) {
                 // Basic form fields
                 populateForm('#thyroid-form', templateData.thyroid);

                 // Delegate complex parts (like lesions) to the module
                 const { loadThyroidTemplateData } = await import('../organs/thyroid/thyroid-module.js');
                 loadThyroidTemplateData(templateData.thyroid); // Pass the thyroid-specific part
            }

            // Handle other organs in the future...

            showNotification(`Template "${name}" loaded successfully.`, 'success');
        } catch (error) {
             console.error(`Error applying template "${name}":`, error);
             showNotification('Failed to apply template data.', 'error');
        }

    } else {
        console.error(`Template "${name}" not found.`);
        showNotification(`Template "${name}" could not be loaded.`, 'error');
    }
}

/**
 * Deletes a template from localStorage.
 * @param {string} name - The name of the template to delete.
 */
export function deleteTemplate(name) {
     // Double-check it's not a preset
     if (name.startsWith(PRESET_INDICATOR)) {
         showNotification('Preset templates cannot be deleted.', 'info');
         return;
     }

    const templates = getSavedTemplates();
    if (templates[name]) {
        delete templates[name];
        try {
            localStorage.setItem(TEMPLATE_STORAGE_KEY, JSON.stringify(templates));
            showNotification(`Template "${name}" deleted.`, 'success');
            populateTemplateDropdown(); // Update the dropdown
        } catch (e) {
            console.error("Error saving updated templates to localStorage:", e);
            showNotification('Failed to delete template from storage.', 'error');
        }
    } else {
        console.warn(`Template "${name}" not found for deletion.`);
        showNotification(`Template "${name}" not found.`, 'error');
    }
}

/**
 * Populates the template selection dropdown with saved and preset templates.
 */
function populateTemplateDropdown() {
    const select = document.getElementById('load-template-select');
    const userGroup = document.getElementById('user-templates-group');
    const presetGroup = document.getElementById('preset-templates-group');

    if (!select || !userGroup || !presetGroup) {
        console.warn("Template dropdown elements not found.");
        return;
    }

    // Clear existing options
    userGroup.innerHTML = '';
    presetGroup.innerHTML = '';

    // Add preset templates
    if (thyroidPresets && thyroidPresets.length > 0) {
        thyroidPresets.forEach(preset => {
            if (preset.name && preset.data) {
                const option = document.createElement('option');
                // Distinguish presets in the display value/text
                option.value = PRESET_INDICATOR + preset.name;
                option.textContent = preset.name;
                presetGroup.appendChild(option);
            }
        });
    } else {
        // Optionally hide the preset group if empty
        presetGroup.style.display = 'none';
    }


    // Add user-saved templates
    const savedTemplates = getSavedTemplates();
    const templateNames = Object.keys(savedTemplates).sort(); // Sort alphabetically

    if (templateNames.length > 0) {
         userGroup.style.display = 'block'; // Show group if there are templates
        templateNames.forEach(name => {
            const option = document.createElement('option');
            option.value = name;
            option.textContent = name;
            userGroup.appendChild(option);
        });
    } else {
         // Optionally hide the user group if empty
         userGroup.style.display = 'none';
         // Add a placeholder if both groups are empty?
         if (presetGroup.style.display === 'none') {
            const placeholder = document.createElement('option');
            placeholder.value = "";
            placeholder.textContent = "-- No Templates Saved --";
            placeholder.disabled = true;
             // Add placeholder directly to select or to a default group if needed
             select.insertBefore(placeholder, select.firstChild.nextSibling); // Add after the "-- Select --" option
         }
    }
     console.log("Template dropdown populated.");
}


// js/core/template-exporter.js
// Provides functionality to export the current state as a JSON template
// and import templates from JSON files.

import { showNotification } from './ui-core.js';
import { getFormData } from './form-core.js';
import { saveTemplate } from './template-core.js'; // To save the imported template

/**
 * Initializes the import/export button listeners.
 */
export function initTemplateExporter() { // Renamed to avoid conflict if called from template-core
    const exportBtn = document.getElementById('export-template-btn');
    const importBtn = document.getElementById('import-template-btn');
    const importFile = document.getElementById('import-template-file');

    if (exportBtn) {
        exportBtn.addEventListener('click', async () => {
             console.log("Export template button clicked.");
             try {
                 // Collect current state similar to saving a template
                 const { collectThyroidData } = await import('../organs/thyroid/thyroid-module.js');
                 const fullThyroidData = collectThyroidData();
                 const currentState = {
                     thyroid: fullThyroidData,
                     // Add other organ data if applicable
                     metadata: {
                         exportedAt: new Date().toISOString(),
                         source: 'Ultrasound Reporting System Export'
                     }
                 };
                 // Suggest a filename based on current content if possible, or generic
                 const filename = `ultrasound_template_${new Date().toISOString().split('T')[0]}.json`;
                 exportDataAsJson(currentState, filename);
                 showNotification('Current state exported as JSON.', 'success');

             } catch (error) {
                 console.error("Error collecting data for export:", error);
                 showNotification('Failed to collect data for export.', 'error');
             }
        });
    }

    if (importBtn && importFile) {
        importBtn.addEventListener('click', () => {
             console.log("Import template button clicked.");
            if (importFile.files.length === 0) {
                showNotification('Please select a JSON file to import.', 'info');
                return;
            }
            const file = importFile.files[0];
            importTemplateFromJson(file);
        });
    }
     console.log("Template exporter/importer initialized.");
}

/**
 * Exports data object as a downloadable JSON file.
 * @param {object} data - The data object to export.
 * @param {string} filename - The suggested filename.
 */
function exportDataAsJson(data, filename = 'template.json') {
    try {
        const jsonString = JSON.stringify(data, null, 2); // Pretty print JSON
        const blob = new Blob([jsonString], { type: 'application/json;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
         console.log(`Data exported as ${filename}`);
    } catch (error) {
        console.error("Error exporting data as JSON:", error);
        showNotification('Failed to export data as JSON.', 'error');
    }
}

/**
 * Imports a template from a selected JSON file.
 * @param {File} file - The JSON file selected by the user.
 */
function importTemplateFromJson(file) {
    if (!file || !file.type.match('application/json')) {
        showNotification('Invalid file type. Please select a JSON file.', 'error');
        return;
    }

    const reader = new FileReader();

    reader.onload = (event) => {
        try {
            const importedData = JSON.parse(event.target.result);

            // Basic validation of imported data structure (can be more thorough)
            if (typeof importedData !== 'object' || importedData === null) {
                 throw new Error("Imported file does not contain valid JSON data.");
            }
             // Check for expected top-level keys (like 'thyroid' or 'metadata')
             if (!importedData.thyroid && !importedData.metadata) { // Example check
                 console.warn("Imported JSON structure might not match expected template format.");
                 // Decide whether to proceed or reject
             }


            // Ask user for a name to save the imported template
            const defaultName = file.name.replace(/\.json$/i, '') || `imported_${Date.now()}`;
            const templateName = prompt("Enter a name for the imported template:", defaultName);

            if (templateName) {
                // Use the saveTemplate function from template-core to add it to storage
                saveTemplate(templateName, importedData);
                 // Optionally, immediately load the imported template?
                 // loadTemplate(templateName);
                 showNotification(`Template "${templateName}" imported successfully. You can now load it from the dropdown.`, 'success');
            } else {
                showNotification('Import cancelled by user.', 'info');
            }

        } catch (error) {
            console.error("Error reading or parsing JSON file:", error);
            showNotification(`Failed to import template: ${error.message}`, 'error');
        } finally {
            // Clear the file input value so the same file can be selected again if needed
            const importFile = document.getElementById('import-template-file');
            if (importFile) importFile.value = '';
        }
    };

    reader.onerror = (event) => {
        console.error("Error reading file:", event.target.error);
        showNotification('Failed to read the selected file.', 'error');
         const importFile = document.getElementById('import-template-file');
         if (importFile) importFile.value = '';
    };

    reader.readAsText(file); // Read the file content as text
}

// Self-initialize if needed, or rely on main.js to call initTemplateExporter
// initTemplateExporter();
// It's better to initialize from main.js after DOM is ready.
// Make sure template-core's init runs first if this relies on it.
// Or combine the initialization logic if they are tightly coupled.
// Let's assume main.js calls both initTemplateSystem and initTemplateExporter.


// js/core/ui-core.js
// Handles common UI interactions like tabs, section toggles, and notifications.

/**
 * Initializes tab switching functionality.
 */
export function initTabs() {
    const tabContainer = document.querySelector('.tab-container');
    if (!tabContainer) return;

    const tabButtons = tabContainer.querySelectorAll('.tab-nav .tab-button');
    const tabContents = tabContainer.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetTabId = button.getAttribute('data-tab');

            // Update button states
            tabButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');

            // Update content visibility
            tabContents.forEach(content => {
                if (content.id === targetTabId) {
                    content.classList.add('active');
                } else {
                    content.classList.remove('active');
                }
            });
        });
    });
    console.log("Tabs initialized.");
}

/**
 * Initializes collapsible section functionality.
 */
export function initSectionToggles() {
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => {
        const toggle = section.querySelector('.section-toggle');
        const content = section.querySelector('.section-content');

        if (toggle && content) {
            toggle.addEventListener('click', () => {
                toggle.classList.toggle('active');
                content.classList.toggle('active');
                // Optional: Change display style directly if needed
                 content.style.display = content.classList.contains('active') ? 'block' : 'none';
            });
             // Start collapsed by default (unless already has active class)
            if (!content.classList.contains('active')) {
                content.style.display = 'none';
            } else {
                 toggle.classList.add('active'); // Ensure toggle matches content state
            }
        }
    });
     console.log("Section toggles initialized.");
     // Optional: Auto-expand the first section in the assessment tab?
     const firstToggle = document.querySelector('#thyroid-assessment .section .section-toggle');
     if (firstToggle) {
        // firstToggle.click(); // Simulate a click to open it
     }
}

/**
 * Displays a temporary notification message.
 * @param {string} message - The message to display.
 * @param {string} type - 'success', 'error', or 'info' (default).
 * @param {number} duration - Duration in milliseconds (default: 3000).
 */
export function showNotification(message, type = 'info', duration = 3000) {
    const notificationsContainer = document.getElementById('notifications');
    if (!notificationsContainer) {
        console.warn("Notification container not found.");
        return;
    }

    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;

    notificationsContainer.appendChild(notification);

    // Auto-remove after duration
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 500); // Wait for fade out
    }, duration);
    console.log(`Notification shown: ${message} (Type: ${type})`);
}


// js/modules/image-handler.js (DEBUG VERSION)
// Includes detailed logging to diagnose preview issues.

import { showNotification } from '../core/ui-core.js';

let uploadedImagesData = [];

export function initImageHandler() {
    console.log("[DEBUG] initImageHandler called."); // Log init start
    const imageUploadInput = document.getElementById('image-upload');
    const previewContainer = document.getElementById('image-preview-container');

    if (imageUploadInput && previewContainer) {
        console.log("[DEBUG] Found image input and preview container.");
        imageUploadInput.addEventListener('change', (event) => {
            console.log("[DEBUG] 'change' event detected on #image-upload."); // Log event fired
            // Pass the container element directly
            handleImageFiles(event.target.files, previewContainer, imageUploadInput);
        });
        console.log("[DEBUG] Event listener added to #image-upload.");
    } else {
        // Log which element is missing
        if (!imageUploadInput) console.error("[DEBUG] CRITICAL: Image upload input ('#image-upload') NOT FOUND.");
        if (!previewContainer) console.error("[DEBUG] CRITICAL: Preview container ('#image-preview-container') NOT FOUND.");
    }
}

function handleImageFiles(files, previewContainer, imageUploadInput) { // Added input for clearing
    if (!files) {
        console.warn("[DEBUG] handleImageFiles called with null/undefined files list.");
        return;
    }
    console.log(`[DEBUG] handleImageFiles started processing ${files.length} file(s).`);

    // Reset input value immediately? Or after loop? Doing it after loop.

    if (files.length === 0) {
        console.log("[DEBUG] No files selected in this batch.");
        // Clear input value even if no files selected? Optional.
        // if (imageUploadInput) imageUploadInput.value = '';
        return;
    }

    Array.from(files).forEach((file, index) => {
        console.log(`[DEBUG] Processing file #${index + 1}: Name='${file.name}', Type='${file.type || 'unknown'}', Size=${file.size} bytes.`);

        // --- Type Check ---
        if (!file.type || !file.type.startsWith('image/')) {
            const skipMsg = `[DEBUG] Skipping non-image file: ${file.name}`;
            console.warn(skipMsg);
            showNotification(`Skipping non-image file: ${file.name}`, 'info');
            return; // Skip to next file in loop
        }
        console.log(`[DEBUG] File '${file.name}' passed image type check.`);

        // --- FileInfo Setup ---
        const fileInfo = {
            id: `img_${Date.now()}_${Math.random().toString(16).slice(2)}`,
            name: file.name, size: file.size, type: file.type, dataUrl: null
        };
        console.log(`[DEBUG] Created fileInfo for '${file.name}' with ID ${fileInfo.id}.`);

        // --- FileReader Setup ---
        try {
            const reader = new FileReader();
            console.log(`[DEBUG] FileReader created for '${file.name}'.`);

            // --- Onload Event Handler ---
            reader.onload = (e) => {
                console.log(`[DEBUG] reader.onload triggered for '${file.name}'.`);
                const imageDataUrl = e.target.result;

                // --- Data URL Validation ---
                if (!imageDataUrl) {
                    console.error(`[DEBUG] ERROR: reader.onload - Result is null/empty for '${file.name}'.`);
                    showNotification(`Error reading image data: ${file.name}`, 'error');
                    return; // Stop processing this file's onload
                }
                if (!imageDataUrl.startsWith('data:image/')) {
                    console.error(`[DEBUG] ERROR: reader.onload - Result is not a valid Data URL for '${file.name}'. Starts with: '${imageDataUrl.substring(0, 30)}...'`);
                    showNotification(`Invalid image data format: ${file.name}`, 'error');
                    return; // Stop processing this file's onload
                }
                console.log(`[DEBUG] reader.onload - Data URL is valid for '${file.name}' (Length: ${imageDataUrl.length}).`);

                // --- Store Data ---
                fileInfo.dataUrl = imageDataUrl;
                uploadedImagesData.push(fileInfo);
                console.log(`[DEBUG] Stored image data for '${file.name}'. Total stored: ${uploadedImagesData.length}.`);

                // --- Create DOM Elements ---
                try {
                    const imgElement = document.createElement('img');
                    imgElement.src = fileInfo.dataUrl;
                    imgElement.alt = file.name;
                    imgElement.title = `${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
                    imgElement.dataset.imageId = fileInfo.id;
                    console.log(`[DEBUG] Created <img> element for '${file.name}'.`);

                    const wrapper = document.createElement('div');
                    wrapper.className = 'image-preview-wrapper';
                    wrapper.appendChild(imgElement);
                    console.log(`[DEBUG] Created wrapper div for '${file.name}'.`);

                    const removeBtn = document.createElement('button');
                    removeBtn.textContent = 'X';
                    removeBtn.className = 'remove-image-btn';
                    removeBtn.title = `Remove ${file.name}`;
                    removeBtn.type = 'button';
                    removeBtn.onclick = () => {
                        console.log(`[DEBUG] Remove button clicked for image ID: ${fileInfo.id}`);
                        removeImage(fileInfo.id, wrapper);
                    };
                    wrapper.appendChild(removeBtn);
                    console.log(`[DEBUG] Created remove button for '${file.name}'.`);

                    // --- Append to DOM ---
                    if (previewContainer) {
                        previewContainer.appendChild(wrapper);
                        console.log(`[DEBUG] SUCCESS: Appended preview wrapper for '${file.name}' to container.`);
                    } else {
                        console.error("[DEBUG] ERROR: Cannot append preview, previewContainer is null inside reader.onload!");
                    }
                } catch (domError) {
                    console.error(`[DEBUG] ERROR creating or appending DOM elements for '${file.name}':`, domError);
                    showNotification(`UI error displaying image: ${file.name}`, 'error');
                }
            }; // End of reader.onload

            // --- Onerror Event Handler ---
            reader.onerror = (e) => {
                console.error(`[DEBUG] reader.onerror triggered for '${file.name}'. Error:`, e.target.error);
                showNotification(`Error reading file: ${file.name}`, 'error');
            };

            // --- Start Reading ---
            console.log(`[DEBUG] Calling reader.readAsDataURL for '${file.name}'.`);
            reader.readAsDataURL(file);

        } catch (readerError) {
            console.error(`[DEBUG] ERROR creating FileReader or starting read for '${file.name}':`, readerError);
            showNotification(`Failed to initiate reading: ${file.name}`, 'error');
        }
    }); // End of forEach loop

    // --- Clear Input Value ---
    if (imageUploadInput) {
        try {
            imageUploadInput.value = ''; // Reset input value AFTER loop finishes
            console.log("[DEBUG] Image file input value cleared after processing batch.");
        } catch(clearError) {
            console.error("[DEBUG] Error clearing file input value:", clearError);
        }
    } else {
         console.warn("[DEBUG] Could not clear file input value, input element not passed or found.");
    }
     console.log("[DEBUG] handleImageFiles finished processing batch.");
}

// removeImage, getUploadedImageData, clearImageData remain the same as the previous full code version
// Ensure they also have console.log if needed, but the core issue seems to be in the loading/display part.

function removeImage(imageId, previewElementWrapper) {
    console.log(`[DEBUG] Attempting to remove image with ID: ${imageId}`);
    if (previewElementWrapper && previewElementWrapper.parentNode) {
        previewElementWrapper.remove();
        const initialLength = uploadedImagesData.length;
        uploadedImagesData = uploadedImagesData.filter(img => img.id !== imageId);
        const removedCount = initialLength - uploadedImagesData.length;
        if (removedCount > 0) {
             console.log(`[DEBUG] Image (ID: ${imageId}) removed successfully. Current count: ${uploadedImagesData.length}.`);
             showNotification('Image removed.', 'success', 1500);
        } else {
             console.warn(`[DEBUG] Image data with ID ${imageId} not found in array.`);
        }
    } else {
         console.error("[DEBUG] Invalid preview element or parent during removal:", previewElementWrapper);
    }
}

export function getUploadedImageData(includeDataUrl = false) {
     console.log(`[DEBUG] Getting image data. Include URL: ${includeDataUrl}. Count: ${uploadedImagesData.length}`);
    if (includeDataUrl) {
        const validImages = uploadedImagesData.filter(img => img.dataUrl && img.dataUrl.startsWith('data:image/'));
        if (validImages.length !== uploadedImagesData.length) {
            console.warn(`[DEBUG] Returning ${validImages.length} valid images out of ${uploadedImagesData.length}.`);
        }
        return JSON.parse(JSON.stringify(validImages));
    } else {
        return uploadedImagesData.map(img => ({ id: img.id, name: img.name, size: img.size, type: img.type }));
    }
}

export function clearImageData() {
     const previewContainer = document.getElementById('image-preview-container');
     if (previewContainer) { previewContainer.innerHTML = ''; }
     uploadedImagesData = [];
     console.log("[DEBUG] All image previews and data cleared.");
     showNotification('All uploaded images cleared.', 'info');
}


// js/modules/report-translator.js
// Module for translating report content using a Generative AI API.

import { showNotification } from '../core/ui-core.js';

// Gemini API endpoint (sử dụng model flash mới nhất)
const API_ENDPOINT = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=';

/**
 * Calls the Generative AI API to translate report text.
 * @param {string} reportText - The plain text content of the report to translate.
 * @param {string} apiKey - The API key for the AI service.
 * @param {string} systemPrompt - The detailed system prompt guiding the translation.
 * @returns {Promise<string>} - A promise that resolves with the translated text or rejects with an error.
 */
export async function translateReportViaApi(reportText, apiKey, systemPrompt) {
    console.log("[Translator] Starting translation via API.");

    if (!reportText) {
        return Promise.reject("No report text provided for translation.");
    }
    if (!apiKey) {
        return Promise.reject("API key is missing for translation.");
    }
    if (!systemPrompt) {
        return Promise.reject("System prompt is missing for translation.");
    }

    const fullApiUrl = API_ENDPOINT + apiKey;

    // Cấu trúc request body cho Gemini API
    const requestBody = {
        // System prompt hướng dẫn vai trò và cách dịch
        systemInstruction: {
            parts: [{ text: systemPrompt }]
        },
        // Nội dung cần dịch (prompt cuối cùng là nội dung báo cáo)
        contents: [
            {
                role: "user",
                parts: [{
                    // Thêm phần dẫn nhập yêu cầu dịch trước nội dung báo cáo
                    text: `\n\n--- BEGIN ENGLISH ULTRASOUND REPORT ---\n\n${reportText}\n\n--- END ENGLISH ULTRASOUND REPORT ---`
                }]
            }
        ],
        // Cấu hình sinh nội dung (tùy chọn, có thể điều chỉnh)
        generationConfig: {
          temperature: 0.3, // Giảm temperature để dịch bám sát hơn
          // topP: 0.9,
          // topK: 40,
          // maxOutputTokens: 4096, // Tăng nếu báo cáo dài
        },
        // Cài đặt an toàn (tùy chọn)
        // safetySettings: [ ... ]
    };

    console.log("[Translator] Sending request to API:", fullApiUrl);
    // console.log("[Translator] Request body (excluding prompt):", { contents: requestBody.contents, generationConfig: requestBody.generationConfig }); // Log request body for debug

    try {
        const response = await fetch(fullApiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });

        console.log("[Translator] API Response Status:", response.status);
        const responseData = await response.json();

        if (!response.ok) {
            console.error("[Translator] API Error Response:", responseData);
            const errorDetail = responseData?.error?.message || `HTTP error ${response.status}`;
            throw new Error(`API request failed: ${errorDetail}`);
        }

        // Kiểm tra cấu trúc response và lấy phần text dịch
        if (responseData.candidates && responseData.candidates.length > 0 &&
            responseData.candidates[0].content && responseData.candidates[0].content.parts &&
            responseData.candidates[0].content.parts.length > 0 && responseData.candidates[0].content.parts[0].text)
        {
            const translatedText = responseData.candidates[0].content.parts[0].text;
            console.log("[Translator] Translation successful.");
            // console.log("[Translator] Translated Text:", translatedText); // Log kết quả dịch
            return translatedText; // Trả về nội dung đã dịch
        } else {
             // Xử lý trường hợp response không có nội dung hoặc bị chặn bởi safety settings
            let reason = "Unknown reason";
            if (responseData.candidates && responseData.candidates[0]?.finishReason) {
                 reason = responseData.candidates[0].finishReason;
            }
             console.error("[Translator] API response structure invalid or content missing/blocked. Reason:", reason, "Response:", responseData);
            throw new Error(`Translation failed: No valid content received from API. Finish Reason: ${reason}`);
        }

    } catch (error) {
        console.error('[Translator] Error during API call:', error);
        showNotification(`Translation Error: ${error.message}`, 'error', 5000); // Show error to user
        // Ném lỗi ra ngoài để hàm gọi có thể xử lý
        throw error; // Re-throw the error after logging/notifying
    }
}


// js/modules/tirads-calculator.js
// Implements ACR TI-RADS calculation based on nodule features.

/**
 * Calculates the TI-RADS score based on selected features.
 * Handles multiple selections for Echogenic Foci by summing points.
 * @param {object} features - An object containing feature values (usually point values as strings).
 * Expected keys: lesionComposition, lesionEchogenicity, lesionShape, lesionMargin, lesionEchogenicFoci (can be array).
 * @returns {number} - The calculated TI-RADS score.
 */
export function calculateTiradsScore(features) {
    let score = 0;

    // --- Sum points from each category ---
    // Ensure values are parsed as numbers, default to 0 if missing/invalid
    score += parseInt(features.lesionComposition || '0', 10) || 0;
    score += parseInt(features.lesionEchogenicity || '0', 10) || 0;
    score += parseInt(features.lesionShape || '0', 10) || 0;
    score += parseInt(features.lesionMargin || '0', 10) || 0;

    // Echogenic Foci: Can be multiple selections. Sum their points.
    const foci = features.lesionEchogenicFoci;
    if (Array.isArray(foci)) {
        foci.forEach(focusValue => {
            score += parseInt(focusValue || '0', 10) || 0;
        });
    } else if (foci) { // Handle single selection if not array
         score += parseInt(foci || '0', 10) || 0;
    }

    // ACR TI-RADS doesn't subtract points, so score won't go below 0.
    console.log("Calculated TI-RADS score:", score, "from features:", features);
    return score;
}

/**
 * Determines the TI-RADS category based on the score.
 * @param {number} score - The calculated TI-RADS score.
 * @returns {string} - The TI-RADS category (e.g., "TR1", "TR2", ... "TR5").
 */
export function getTiradsCategory(score) {
    if (score === 0) return "TR1"; // Benign
    if (score === 1 || score === 2) return "TR2"; // Not suspicious
    if (score === 3) return "TR3"; // Mildly suspicious
    if (score >= 4 && score <= 6) return "TR4"; // Moderately suspicious
    if (score >= 7) return "TR5"; // Highly suspicious
    return "TR?"; // Should not happen if score is calculated
}

/**
 * Provides follow-up recommendations based on TI-RADS category and nodule size (largest dimension).
 * Note: These are simplified examples based on common practice / ACR guidelines. ALWAYS refer to the official, current ACR guidelines.
 * @param {string} category - The TI-RADS category (e.g., "TR3").
 * @param {number|string|null} largestDimension - The largest dimension of the nodule in mm.
 * @returns {string} - A text recommendation.
 */
export function getTiradsRecommendation(category, largestDimension) {
    const size = parseFloat(largestDimension);
     if (isNaN(size) && (category === 'TR3' || category === 'TR4' || category === 'TR5')) {
         return "Size needed for recommendation.";
     }

    switch (category) {
        case "TR1":
        case "TR2":
            return "No FNA or follow-up needed.";
        case "TR3": // Mildly suspicious
            if (size >= 25) return "FNA recommended."; // >= 2.5 cm
            if (size >= 15) return "Follow-up recommended (e.g., 1, 3, 5 years)."; // >= 1.5 cm
            return "No FNA or follow-up needed."; // < 1.5 cm
        case "TR4": // Moderately suspicious
            if (size >= 15) return "FNA recommended."; // >= 1.5 cm
            if (size >= 10) return "Follow-up recommended (e.g., 1, 2, 3, 5 years)."; // >= 1.0 cm
            return "No FNA or follow-up needed."; // < 1.0 cm
        case "TR5": // Highly suspicious
            if (size >= 10) return "FNA recommended."; // >= 1.0 cm
            if (size >= 5) return "Follow-up recommended (e.g., annually for up to 5 years)."; // >= 0.5 cm
            return "No FNA or follow-up needed."; // < 0.5 cm
        default:
            return "Recommendation undetermined.";
    }
}

/**
 * Attaches event listeners to TI-RADS related fields within a lesion element
 * to trigger score recalculation and display updates.
 * @param {HTMLElement} lesionElement - The container element for a single lesion's form fields.
 */
export function setupTiradsCalculationForLesion(lesionElement) {
    const tiradsFields = lesionElement.querySelectorAll('.tirads-field');
    const dimensionFields = lesionElement.querySelectorAll('.dimension'); // Need size for recommendation

    const updateDisplay = () => {
        updateTiradsDisplay(lesionElement);
    };

    tiradsFields.forEach(field => {
        field.addEventListener('change', updateDisplay);
    });

     dimensionFields.forEach(field => {
         field.addEventListener('input', updateDisplay); // Update recommendation as size changes
          field.addEventListener('change', updateDisplay);
     });

    // Initial calculation when setting up
    updateTiradsDisplay(lesionElement);
    console.log(`TI-RADS calculation listener set up for lesion: ${lesionElement.dataset.lesionId}`);
}

/**
 * Updates the displayed TI-RADS score, category, and recommendation for a lesion.
 * @param {HTMLElement} lesionElement - The lesion container element.
 */
export function updateTiradsDisplay(lesionElement) {
    const features = {};
    const tiradsFields = lesionElement.querySelectorAll('.tirads-field');

    // Gather feature data from the fields within this lesion element
    tiradsFields.forEach(field => {
        if (field.name) {
             if (field.type === 'select-multiple') {
                 features[field.name] = Array.from(field.selectedOptions).map(opt => opt.value);
             } else {
                 features[field.name] = field.value;
             }
        }
    });

     // Get largest dimension for recommendation
     let largestDim = 0;
     const dimInputs = lesionElement.querySelectorAll('.dimension-group input.dimension');
     dimInputs.forEach(input => {
         const val = parseFloat(input.value);
         if (!isNaN(val) && val > largestDim) {
             largestDim = val;
         }
     });

    // Calculate score, category, recommendation
    const score = calculateTiradsScore(features);
    const category = getTiradsCategory(score);
    const recommendation = getTiradsRecommendation(category, largestDim > 0 ? largestDim : null);

    // Update the display elements
    const scoreDisplay = lesionElement.querySelector('.tirads-score');
    const categoryDisplay = lesionElement.querySelector('.tirads-category');
    const recommendationDisplay = lesionElement.querySelector('.tirads-recommendation');
     // Hidden input to store score in form data
     let scoreInput = lesionElement.querySelector('input[name="tiradsScore"]');
     if (!scoreInput) {
         scoreInput = document.createElement('input');
         scoreInput.type = 'hidden';
         scoreInput.name = 'tiradsScore';
         lesionElement.appendChild(scoreInput);
     }
     // Hidden input for category
     let categoryInput = lesionElement.querySelector('input[name="tiradsCategory"]');
     if (!categoryInput) {
         categoryInput = document.createElement('input');
         categoryInput.type = 'hidden';
         categoryInput.name = 'tiradsCategory';
         lesionElement.appendChild(categoryInput);
     }
      // Hidden input for recommendation
     let recommendationInput = lesionElement.querySelector('input[name="tiradsRecommendation"]');
     if (!recommendationInput) {
         recommendationInput = document.createElement('input');
         recommendationInput.type = 'hidden';
         recommendationInput.name = 'tiradsRecommendation';
         lesionElement.appendChild(recommendationInput);
     }


    if (scoreDisplay) scoreDisplay.textContent = score;
    if (categoryDisplay) categoryDisplay.textContent = category;
    if (recommendationDisplay) recommendationDisplay.textContent = `Recommendation: ${recommendation}`;
     if (scoreInput) scoreInput.value = score;
     if (categoryInput) categoryInput.value = category;
     if (recommendationInput) recommendationInput.value = recommendation;

     // console.log(`TI-RADS display updated for lesion ${lesionElement.dataset.lesionId}: Score=${score}, Cat=${category}, Reco=${recommendation}`);
}


// js/modules/volume-calculator.js
// Contains formulas and functions for calculating organ volumes.

import { showNotification } from '../core/ui-core.js';

const VOLUME_COEFFICIENT = 0.523; // Standard coefficient for ellipsoid volume (π/6)

/**
 * Calculates the volume based on three dimensions using the ellipsoid formula.
 * @param {number|string} d1 - Dimension 1 (e.g., Width).
 * @param {number|string} d2 - Dimension 2 (e.g., AP diameter).
 * @param {number|string} d3 - Dimension 3 (e.g., Length).
 * @returns {number|null} - Calculated volume in mL, or null if inputs are invalid.
 */
export function calculateEllipsoidVolume(d1, d2, d3) {
    const numD1 = parseFloat(d1);
    const numD2 = parseFloat(d2);
    const numD3 = parseFloat(d3);

    if (isNaN(numD1) || isNaN(numD2) || isNaN(numD3) || numD1 <= 0 || numD2 <= 0 || numD3 <= 0) {
        // console.warn("Invalid dimensions for volume calculation:", d1, d2, d3);
        return null; // Return null for invalid or incomplete dimensions
    }

    const volume = numD1 * numD2 * numD3 * VOLUME_COEFFICIENT / 1000; // Convert mm^3 to mL (cm^3)
    return parseFloat(volume.toFixed(2)); // Return volume rounded to 2 decimal places
}

/**
 * Sets up automatic volume calculation for thyroid lobe dimension inputs.
 */
export function setupThyroidVolumeCalculations() {
    const dimensionInputs = document.querySelectorAll('#thyroid-assessment .dimension-group input.dimension');
    dimensionInputs.forEach(input => {
        input.addEventListener('input', (event) => {
            updateLobeVolume(event.target);
        });
         // Also trigger on 'change' in case values are pasted or set programmatically
         input.addEventListener('change', (event) => {
             updateLobeVolume(event.target);
         });
    });
     console.log("Thyroid volume calculation listeners set up.");
}

/**
 * Updates the volume display for a specific lobe based on its dimension inputs.
 * @param {HTMLInputElement} triggerInput - The input element that triggered the update.
 */
function updateLobeVolume(triggerInput) {
    const dimensionGroup = triggerInput.closest('.dimension-group');
    if (!dimensionGroup) return;

    const lobe = triggerInput.getAttribute('data-lobe'); // e.g., 'right', 'left'
    if (!lobe) return;

    const d1Input = dimensionGroup.querySelector(`#${lobe}-lobe-d1`);
    const d2Input = dimensionGroup.querySelector(`#${lobe}-lobe-d2`);
    const d3Input = dimensionGroup.querySelector(`#${lobe}-lobe-d3`);
    const volumeDisplay = dimensionGroup.querySelector(`#${lobe}-lobe-volume`);
    // Hidden input to store calculated volume in the form data
    let volumeInput = dimensionGroup.querySelector(`input[name="${lobe}LobeVolume"]`);
     if (!volumeInput) {
         volumeInput = document.createElement('input');
         volumeInput.type = 'hidden';
         volumeInput.name = `${lobe}LobeVolume`;
         dimensionGroup.appendChild(volumeInput);
     }


    if (d1Input && d2Input && d3Input && volumeDisplay && volumeInput) {
        const volume = calculateEllipsoidVolume(d1Input.value, d2Input.value, d3Input.value);

        if (volume !== null) {
            volumeDisplay.textContent = volume;
            volumeInput.value = volume; // Store for form submission/data collection
        } else {
            volumeDisplay.textContent = '0'; // Or 'N/A', or empty
             volumeInput.value = ''; // Clear stored value if calculation fails
        }
    } else {
         console.warn(`Could not find all elements for ${lobe} lobe volume calculation.`);
    }
}

// Potential future expansion:
// export function calculateVolume(shape, ...dims) {
//   switch(shape) {
//     case 'ellipsoid': return calculateEllipsoidVolume(...dims);
//     // case 'otherShape': ...
//     default: return null;
//   }
// }

// js/organs/thyroid/thyroid-module.js
// Module specific to Thyroid ultrasound reporting.

// Core imports
import { showNotification } from '../../core/ui-core.js';
import { populateForm, getFormData } from '../../core/form-core.js'; // Use updated v4
// Module imports
import { setupThyroidVolumeCalculations } from '../../modules/volume-calculator.js';
import { setupTiradsCalculationForLesion, updateTiradsDisplay } from '../../modules/tirads-calculator.js';
// import { clearImageData } from '../../modules/image-handler.js'; // Uncomment if image handling is used

// Module-level variables
let lesionCounter = 0; // Counter for unique lesion IDs
const hideSuggestionTimeouts = {}; // Object to store suggestion hide timeouts

/**
 * Initializes the thyroid module functionalities.
 */
export function init() {
    console.log("[ThyroidModule] Initializing...");
    try {
        setupThyroidVolumeCalculations(); // Setup for main gland dimensions

        const addLesionBtn = document.getElementById('add-lesion-btn');
        const thyroidForm = document.getElementById('thyroid-form'); // Main container

        if (addLesionBtn) {
            addLesionBtn.addEventListener('click', addLesionElement);
        } else {
            console.warn("[ThyroidModule] Add Lesion button ('#add-lesion-btn') not found.");
        }

        if (thyroidForm) {
            // Event Delegation for dynamic elements within the form
            thyroidForm.addEventListener('click', function(event) {
                const target = event.target;
                if (target.classList.contains('suggestion-btn')) {
                    handleSuggestionButtonClick(target);
                    const container = target.closest('.suggestion-button-container');
                    if (container) container.style.display = 'none';
                } else if (target.classList.contains('remove-lesion-btn')) {
                    removeLesionElement(target);
                }
            });
            // Initial suggestion setup for elements present on load
            setupSuggestionVisibility(thyroidForm);
        } else {
             console.warn("[ThyroidModule] Thyroid form element ('#thyroid-form') not found for event delegation or initial setup.");
        }

        console.log("[ThyroidModule] Initialized successfully.");
    } catch (error) {
         console.error("[ThyroidModule] Error during initialization:", error);
         showNotification("Failed to initialize thyroid module.", "error");
    }
}

/**
 * Sets up focus/blur listeners for suggestion buttons visibility.
 * @param {HTMLElement} parentElement - Element to search within (form or lesion item).
 */
function setupSuggestionVisibility(parentElement) {
     const suggestionContainers = parentElement.querySelectorAll('.suggestion-button-container');
     // console.debug(`[ThyroidModule] Setting up suggestion visibility for ${suggestionContainers.length} containers in`, parentElement);
     suggestionContainers.forEach(container => {
         const textarea = container.previousElementSibling;
         if (textarea && textarea.tagName === 'TEXTAREA') {
             let textareaId = textarea.id || `textarea_${Date.now()}_${Math.random().toString(16).slice(2)}`;
             textarea.id = textareaId; // Ensure it has an ID

             // Remove existing listeners first to prevent duplicates if called multiple times on same element
             textarea.removeEventListener('focus', handleTextareaFocus);
             textarea.removeEventListener('blur', handleTextareaBlur);

             // Add new listeners
             textarea.addEventListener('focus', handleTextareaFocus);
             textarea.addEventListener('blur', handleTextareaBlur);
         }
     });
}

// Named function for focus listener
function handleTextareaFocus(event) {
    const textarea = event.target;
    const textareaId = textarea.id;
    const container = textarea.nextElementSibling; // Assuming container is immediate sibling
    // console.debug(`[ThyroidModule] Focus on textarea: ${textareaId}`);
    if (hideSuggestionTimeouts[textareaId]) {
        clearTimeout(hideSuggestionTimeouts[textareaId]);
        delete hideSuggestionTimeouts[textareaId];
    }
    if(container && container.classList.contains('suggestion-button-container')) {
        container.style.display = 'flex';
    }
}

// Named function for blur listener
function handleTextareaBlur(event) {
    const textarea = event.target;
    const textareaId = textarea.id;
    const container = textarea.nextElementSibling;
    // console.debug(`[ThyroidModule] Blur on textarea: ${textareaId}`);
    if(container && container.classList.contains('suggestion-button-container')) {
        hideSuggestionTimeouts[textareaId] = setTimeout(() => {
            container.style.display = 'none';
            delete hideSuggestionTimeouts[textareaId];
        }, 250);
    }
}


/**
 * Handles suggestion button clicks.
 * @param {HTMLButtonElement} button - The button clicked.
 */
function handleSuggestionButtonClick(button) {
    const textToInsert = button.dataset.insert;
    const formGroup = button.closest('.form-group');
    const targetTextarea = formGroup ? formGroup.querySelector('textarea') : null;
    if (targetTextarea && textToInsert !== undefined) { // Check if data-insert exists
        const currentValue = targetTextarea.value;
        let separator = '';
        if (currentValue.trim().length > 0) {
            const lastChar = currentValue.trim().slice(-1);
            separator = ['.', '?', '!', ':', ';', ','].includes(lastChar) ? ' ' : '. ';
        }
        targetTextarea.value += separator + textToInsert;
        targetTextarea.dispatchEvent(new Event('input', { bubbles: true }));
        targetTextarea.focus();
        targetTextarea.scrollTop = targetTextarea.scrollHeight; // Scroll to bottom
    } else {
        console.warn("[handleSuggestionButtonClick] Target textarea or data-insert attribute not found.", button);
    }
}

/**
 * Adds a new lesion entry section to the form.
 */
function addLesionElement() {
    lesionCounter++;
    const template = document.getElementById('lesion-template');
    const lesionsContainer = document.getElementById('lesions-container');
    if (!template || !lesionsContainer) {
        console.error("[addLesionElement] Lesion template or container not found.");
        return;
    }

    try {
        const clone = template.content.cloneNode(true);
        const lesionItem = clone.querySelector('.lesion-item');
        if (!lesionItem) {
             console.error("[addLesionElement] '.lesion-item' div not found in template content.");
             return;
        }

        const lesionId = `lesion_${lesionCounter}`;
        lesionItem.dataset.lesionId = lesionId; // Useful for tracking
        const numberSpan = lesionItem.querySelector('.lesion-number');
        if (numberSpan) numberSpan.textContent = lesionCounter;

        // Append the new structure to the DOM *before* trying to set up listeners on it
        lesionsContainer.appendChild(clone);

        // Setup functionalities specific to the newly added lesionItem DIV
        setupTiradsCalculationForLesion(lesionItem); // Setup TI-RADS listeners
        setupSuggestionVisibility(lesionItem); // Setup suggestion listeners within new item

        showNotification(`Lesion ${lesionCounter} added. / Thêm tổn thương ${lesionCounter}.`, 'info', 1500);
        lesionItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

    } catch (error) {
        console.error("[addLesionElement] Error:", error);
        showNotification("Failed to add new lesion section.", "error");
    }
}


/**
 * Removes a lesion entry section.
 * @param {HTMLButtonElement} removeButton - The remove button clicked.
 */
function removeLesionElement(removeButton) {
    const lesionItem = removeButton.closest('.lesion-item');
    if (lesionItem) {
        const lesionNumberText = lesionItem.querySelector('.lesion-number')?.textContent;
        const lesionId = lesionItem.dataset.lesionId;
        const confirmText = lesionNumberText ? `Lesion ${lesionNumberText}` : (lesionId || 'this lesion');

        if (confirm(`Are you sure you want to remove ${confirmText}? / Xóa tổn thương ${lesionNumberText || lesionId}?`)) {
             lesionItem.remove();
             showNotification(`${confirmText} removed. / Đã xóa.`, 'info', 1500);
             // Note: Re-numbering lesions dynamically after removal is complex and not implemented here.
        }
    } else {
        console.warn("[removeLesionElement] Could not find parent '.lesion-item'.", removeButton);
    }
}

/**
 * Collects all data for the thyroid assessment.
 * @returns {object | null} - Thyroid data object or null on error.
 */
export function collectThyroidData() {
    // console.log("[ThyroidModule] Collecting thyroid data...");
    const mainForm = document.getElementById('thyroid-form');
    if (!mainForm) {
        console.error("[collectThyroidData] Main form '#thyroid-form' not found.");
        return null;
    }
    try {
        // Use getFormData scoped to the main form, it should ignore inputs within lesion items if they are nested correctly
        const basicData = getFormData(mainForm);
        const lesionsData = [];
        const lesionItems = mainForm.querySelectorAll('#lesions-container > .lesion-item'); // Direct children

        lesionItems.forEach((lesionItem, index) => {
            // Use getFormData scoped to the specific lesion item DIV
            const lesionFormData = getFormData(lesionItem);
            // Ensure IDs/Numbers are consistent
            lesionFormData.id = lesionItem.dataset.lesionId || `lesion_${index + 1}`;
            lesionFormData.number = index + 1;
            lesionsData.push(lesionFormData);
        });

        // Check for potential conflicts before merging
        if (basicData.hasOwnProperty('lesions')) {
            console.warn("[collectThyroidData] Main form contains a field named 'lesions'. This will be overwritten by the lesions array.");
        }
        if (basicData.hasOwnProperty('formatReportSectionHtml')) {
            console.warn("[collectThyroidData] Main form contains a field named 'formatReportSectionHtml'. This will be overwritten.");
        }


        const fullData = {
            ...basicData, // Gland-level data
            lesions: lesionsData, // Array of lesion data objects
            formatReportSectionHtml: function() { return formatThyroidReportSectionHtml(this); } // Attach formatter
        };
        // console.debug("[collectThyroidData] Collected data:", fullData);
        return fullData;
    } catch (error) {
        console.error("[collectThyroidData] Error:", error);
        showNotification("Failed to collect thyroid data.", "error");
        return null;
    }
}


/**
 * Loads template data into the thyroid section.
 * @param {object} thyroidTemplateData - Thyroid-specific template data object.
 */
export function loadThyroidTemplateData(thyroidTemplateData) {
    if (!thyroidTemplateData || typeof thyroidTemplateData !== 'object') {
         console.warn("[loadThyroidTemplateData] Invalid or missing thyroid template data.");
         return;
    }
    console.log("[loadThyroidTemplateData] Loading thyroid template...");

    // 1. Clear existing lesions
    const lesionsContainer = document.getElementById('lesions-container');
    if (lesionsContainer) {
        lesionsContainer.innerHTML = '';
    } else {
        console.error("[loadThyroidTemplateData] Lesions container '#lesions-container' not found!");
        return;
    }
    lesionCounter = 0;

    // 2. Prepare gland data (exclude 'lesions' array)
    const glandDataToPopulate = { ...thyroidTemplateData };
    delete glandDataToPopulate.lesions; // Don't try to populate main form with the array

    // 3. Populate static fields (suppress events)
    try {
        // Target the main form explicitly for gland data
        populateForm('#thyroid-form', glandDataToPopulate, { dispatchEvents: false });
    } catch (formError) {
        console.error("[loadThyroidTemplateData] Error populating main thyroid form:", formError);
        // Decide whether to continue
    }

    // 4. Add and populate lesions from the 'lesions' array
    if (thyroidTemplateData.lesions && Array.isArray(thyroidTemplateData.lesions)) {
        console.log(`[loadThyroidTemplateData] Processing ${thyroidTemplateData.lesions.length} lesions from template.`);
        thyroidTemplateData.lesions.forEach((lesionData, index) => {
            if (typeof lesionData === 'object' && lesionData !== null) {
                console.log(`[loadThyroidTemplateData] Processing lesion #${index + 1}...`);
                addLesionElementAndPopulate(lesionData); // Use the helper which now handles errors per lesion
            } else {
                 console.warn(`[loadThyroidTemplateData] Invalid lesion data at index ${index}. Skipping.`);
            }
        });
    }

    // 5. Trigger necessary updates AFTER all population attempts
    console.log("[loadThyroidTemplateData] Triggering post-population updates...");
    // Trigger volume calculation update for main gland dimensions
    document.querySelectorAll('#thyroid-assessment .dimension-group input.dimension[data-lobe]').forEach(input => {
         input.dispatchEvent(new Event('input', { bubbles: true }));
         input.dispatchEvent(new Event('change', { bubbles: true }));
    });
    // TI-RADS updates are handled within addLesionElementAndPopulate after each successful population

    console.log("[loadThyroidTemplateData] Finished applying template data process.");
}


/**
 * Helper to add, append, populate a lesion item, and set up its listeners.
 * Includes error handling for the population step.
 * @param {object} lesionData - Data object for a single lesion.
 */
function addLesionElementAndPopulate(lesionData) {
     lesionCounter++;
     const template = document.getElementById('lesion-template');
     const lesionsContainer = document.getElementById('lesions-container');
     if (!template || !lesionsContainer) { return; } // Guard clauses

     try {
         const clone = template.content.cloneNode(true);
         const lesionItem = clone.querySelector('.lesion-item'); // Get the wrapper DIV
         if (!lesionItem) {
            console.error("[addLesionElementAndPopulate] '.lesion-item' DIV not found in template content.");
            return;
         }

         const lesionId = lesionData.id || `lesion_${lesionCounter}`;
         lesionItem.dataset.lesionId = lesionId;
         const numberSpan = lesionItem.querySelector('.lesion-number');
         if (numberSpan) numberSpan.textContent = lesionCounter;

         // 1. Append the structure to the DOM FIRST
         lesionsContainer.appendChild(clone);

         // 2. Populate the fields WITHIN the newly appended lesionItem DIV (suppress events)
         try {
             // Pass the lesionItem DIV element directly
             populateForm(lesionItem, lesionData, { dispatchEvents: false });
         } catch (populateError) {
             // Log the error and potentially mark the item, but continue to next lesion
             console.error(`[addLesionElementAndPopulate] Error during populateForm for lesion ${lesionId}:`, populateError);
             showNotification(`Error populating data for lesion ${lesionCounter}. Check console.`, "error");
             lesionItem.classList.add('populate-error'); // Add class for styling/identification
             return; // Stop processing THIS lesion, but allow loop in loadThyroidTemplateData to continue
         }

         // 3. Setup TI-RADS listeners AFTER successful population
         setupTiradsCalculationForLesion(lesionItem);

         // 4. Manually trigger TI-RADS update based on populated data
         // This should now work as data is set and listeners are attached
         // console.debug(`[addLesionElementAndPopulate] Updating TI-RADS display for ${lesionId}`);
         updateTiradsDisplay(lesionItem);

         // 5. Setup suggestion visibility for textareas within this item
         setupSuggestionVisibility(lesionItem);

     } catch (error) {
         // Catch errors during cloning or appending
         console.error("[addLesionElementAndPopulate] Error creating/appending lesion structure:", error);
         showNotification("Failed to create new lesion structure.", "error");
     }
}


/**
 * Formats the FINDINGS section for a Thyroid report as an HTML string.
 * @param {object} data - Collected thyroid data object.
 * @returns {string} - Formatted findings HTML block string.
 */
function formatThyroidReportSectionHtml(data) {
     if (!data) return "<p>Error: No thyroid data provided.</p>";
     // console.log("[ThyroidModule] Formatting Thyroid report section...");

     // Helper to safely get value and format multiline text
     const getValue = (obj, key, fallback = 'N/A') => (obj && obj[key] !== null && obj[key] !== undefined && obj[key] !== '') ? obj[key] : fallback;
     const formatText = (text) => text ? String(text).replace(/\n/g, '<br>&nbsp;&nbsp;') : 'N/A';

     let findings = `<h4>THYROID GLAND / TUYẾN GIÁP:</h4>`;
     findings += `<p><strong>Overall Size / Kích thước chung:</strong> ${formatText(getValue(data, 'overallSize'))}<br>`;
     findings += `<strong>Echotexture / Cấu trúc hồi âm:</strong> ${formatText(getValue(data, 'echotexture'))}<br>`;
     findings += `<strong>Vascularity / Tưới máu:</strong> ${formatText(getValue(data, 'vascularity'))}</p>`;

     findings += `<h4>Right Lobe / Thùy Phải:</h4><p><strong>Dimensions / Kích thước (WxAPxL):</strong> ${getValue(data, 'rightLobeD1','?')} x ${getValue(data, 'rightLobeD2','?')} x ${getValue(data, 'rightLobeD3','?')} mm<br><strong>Volume / Thể tích:</strong> ${getValue(data, 'rightLobeVolume','N/A')} mL<br><strong>Findings / Mô tả:</strong> ${formatText(getValue(data, 'rightLobeFindings'))}</p>`;
     findings += `<h4>Left Lobe / Thùy Trái:</h4><p><strong>Dimensions / Kích thước (WxAPxL):</strong> ${getValue(data, 'leftLobeD1','?')} x ${getValue(data, 'leftLobeD2','?')} x ${getValue(data, 'leftLobeD3','?')} mm<br><strong>Volume / Thể tích:</strong> ${getValue(data, 'leftLobeVolume','N/A')} mL<br><strong>Findings / Mô tả:</strong> ${formatText(getValue(data, 'leftLobeFindings'))}</p>`;
     findings += `<h4>Isthmus / Eo Giáp:</h4><p><strong>AP Thickness / Bề dày TS:</strong> ${getValue(data, 'isthmusThickness') !== 'N/A' ? getValue(data, 'isthmusThickness') + ' mm' : 'N/A'}<br><strong>Findings / Mô tả:</strong> ${formatText(getValue(data, 'isthmusFindings'))}</p>`;

     findings += `<h4>FOCAL LESIONS / TỔN THƯƠNG KHU TRÚ:</h4>`;
     if (data.lesions && Array.isArray(data.lesions) && data.lesions.length > 0) {
         data.lesions.forEach((lesion, index) => {
            findings += `<div class="report-lesion-item" style="margin-bottom: 10px; padding-left: 15px; border-left: 2px solid #eee;">`;
            findings += `<p><strong><u>Lesion #${index + 1} / Tổn thương #${index + 1}:</u></strong><br>`;
            findings += `&nbsp;&nbsp;<strong>Location / Vị trí:</strong> ${formatText(getValue(lesion, 'lesionLocation'))}<br>`;
            findings += `&nbsp;&nbsp;<strong>Size / Kích thước (WxAPxL):</strong> ${getValue(lesion, 'lesionD1','?')} x ${getValue(lesion, 'lesionD2','?')} x ${getValue(lesion, 'lesionD3','?')} mm<br>`;
            // Map TI-RADS values to text for report readability
            findings += `&nbsp;&nbsp;<strong>Composition / Thành phần:</strong> ${formatText(mapTiradsValueToText('Composition', getValue(lesion, 'lesionComposition')))}<br>`;
            findings += `&nbsp;&nbsp;<strong>Echogenicity / Hồi âm:</strong> ${formatText(mapTiradsValueToText('Echogenicity', getValue(lesion, 'lesionEchogenicity')))}<br>`;
            findings += `&nbsp;&nbsp;<strong>Shape / Hình dạng:</strong> ${formatText(mapTiradsValueToText('Shape', getValue(lesion, 'lesionShape')))}<br>`;
            findings += `&nbsp;&nbsp;<strong>Margin / Bờ:</strong> ${formatText(mapTiradsValueToText('Margin', getValue(lesion, 'lesionMargin')))}<br>`;
            const fociValues = getValue(lesion, 'lesionEchogenicFoci', []); // Expecting array of values like ["1", "2"]
            const fociText = Array.isArray(fociValues) && fociValues.length > 0
                             ? fociValues.map(f => mapTiradsValueToText('Foci', f)).join(', ')
                             : 'None / Không có';
            findings += `&nbsp;&nbsp;<strong>Echogenic Foci / Hồi âm dày:</strong> ${formatText(fociText)}<br>`;
            findings += `&nbsp;&nbsp;<strong>ACR TI-RADS Score / Điểm:</strong> ${getValue(lesion, 'tiradsScore')}<br>`;
            findings += `&nbsp;&nbsp;<strong>ACR TI-RADS Category / Phân loại:</strong> ${formatText(getValue(lesion, 'tiradsCategory'))}<br>`;
            findings += `&nbsp;&nbsp;<strong>Recommendation / Đề nghị:</strong> ${formatText(getValue(lesion, 'tiradsRecommendation'))}<br>`;
            findings += `&nbsp;&nbsp;<strong>Description / Mô tả chi tiết:</strong> ${formatText(getValue(lesion, 'lesionDescription'))}</p>`;
            findings += `</div>`;
         });
     } else {
         findings += `<p>No discrete focal lesions identified. / Không thấy tổn thương khu trú rõ rệt.</p>`;
     }

     findings += `<h4>REGIONAL LYMPH NODES / HẠCH VÙNG CỔ:</h4><p>${formatText(getValue(data, 'lymphNodes', 'Not assessed or no significant findings. / Không đánh giá hoặc không thấy bất thường đáng kể.'))}</p>`;
     findings += `<h4>IMPRESSION / KẾT LUẬN:</h4><p>${formatText(getValue(data, 'impression'))}</p>`;
     const recommendation = getValue(data, 'recommendation', '');
     if (recommendation !== 'N/A' && recommendation !== '') {
        findings += `<h4>RECOMMENDATION / ĐỀ NGHỊ:</h4><p>${formatText(recommendation)}</p>`;
     }

     return findings;
}

// Helper function to map TI-RADS numeric string values back to readable text
// Used ONLY for formatting the final report section HTML
function mapTiradsValueToText(featureType, value) {
    // Added more specific text, trying to match HTML options where possible
    const map = {
        Composition: { '0': 'Cystic/Spongiform / Nang/Bọt biển', '1': 'Mixed / Hỗn hợp', '2': 'Solid / Đặc' },
        Echogenicity: { '0': 'Anechoic / Trống âm', '1': 'Hyper/Isoechoic / Tăng/Đồng âm', '2': 'Hypoechoic / Giảm âm', '3': 'Very Hypoechoic / Rất giảm âm' },
        Shape: { '0': 'Wider-than-tall / Rộng hơn cao', '3': 'Taller-than-wide / Cao hơn rộng' },
        Margin: { '0': 'Smooth or Ill-defined / Trơn láng/Không rõ', '2': 'Lobulated or Irregular / Bờ thùy/Không đều', '3': 'Extra-thyroidal extension / Xâm lấn vỏ bao' },
        Foci: { '0': 'None or Large comet-tail / Không/Đuôi sao chổi lớn', '1': 'Macro/Rim Calc. / Vôi hóa thô/Viền', '2': 'Punctate (PEF) / Vi vôi hóa (PEF)' }
    };
    return map[featureType]?.[value] || value || 'N/A'; // Return mapped text, original value, or N/A
}


console.log("thyroid-module.js loaded v4");

// js/organs/thyroid/thyroid-presets.js

/**
 * Định nghĩa các mẫu dữ liệu cài sẵn cho các kết quả siêu âm tuyến giáp phổ biến.
 * Defines preset data templates for common thyroid ultrasound findings.
 *
 * PHIÊN BẢN CẬP NHẬT - DỰA TRÊN PHÂN TÍCH CODE LIÊN QUAN (template-core, thyroid-module, html)
 * UPDATED VERSION - BASED ON ANALYSIS OF RELATED CODE (template-core, thyroid-module, html)
 *
 * Cấu trúc: Mảng (Array) các object, mỗi object có 'name' và 'data'.
 * Structure: Array of objects, each with 'name' and 'data'.
 * Tên trường: Sử dụng tên trường khớp với form và hàm format (vd: rightLobeD1, rightLobeFindings).
 * Field Names: Uses field names matching the form and format function (e.g., rightLobeD1, rightLobeFindings).
 * Kích thước: Đơn vị milimét (mm).
 * Dimensions: Unit is millimeters (mm).
 * Thể tích: Không tính sẵn, để ứng dụng tự tính.
 * Volume: Not pre-calculated, let the application calculate.
 * Tổn thương: Dữ liệu chỉ nằm trong mảng 'lesions', không "flatten". Đối với các trường lựa chọn TI-RADS,
 * giá trị là chuỗi số điểm khớp với value của HTML options (vd: "0", "1", "2").
 * Lesions: Data resides only within the 'lesions' array, no flattening. For TI-RADS select fields,
 * the value is the numeric point string matching the HTML option value (e.g., "0", "1", "2").
 * Song ngữ: Định dạng "Tiếng Anh / Tiếng Việt" cho các mô tả.
 * Bilingual: Format "English / Vietnamese" for descriptions.
 */
export const thyroidPresets = [
    { // Preset 1: Normal
        name: "Normal Thyroid / Tuyến Giáp Bình Thường",
        data: {
            thyroid: {
                // General Findings / Tổng quát
                overallSize: "Normal size for age and sex / Kích thước bình thường theo tuổi và giới",
                echotexture: "Homogeneous with medium level echoes / Đồng nhất, hồi âm trung bình",
                vascularity: "Normal vascularity on Color Doppler / Tưới máu bình thường trên Doppler màu",
                // Right Lobe / Thùy Phải (mm)
                rightLobeD1: "15", rightLobeD2: "18", rightLobeD3: "45",
                rightLobeFindings: "Normal parenchyma, appears homogeneous. No cystic or solid focal lesions identified. / Mô giáp bình thường, cấu trúc đồng nhất. Không thấy tổn thương khu trú dạng nang hay đặc.",
                // Left Lobe / Thùy Trái (mm)
                leftLobeD1: "14", leftLobeD2: "17", leftLobeD3: "44",
                leftLobeFindings: "Normal parenchyma, appears homogeneous. No cystic or solid focal lesions identified. / Mô giáp bình thường, cấu trúc đồng nhất. Không thấy tổn thương khu trú dạng nang hay đặc.",
                // Isthmus / Eo giáp (mm)
                isthmusThickness: "3",
                isthmusFindings: "Normal thickness and echotexture. No nodules. / Bề dày và cấu trúc hồi âm bình thường. Không có nhân.",
                // Lesions / Tổn thương khu trú
                lesions: [], // No lesions for normal / Không có tổn thương
                // Lymph Nodes / Hạch vùng cổ
                lymphNodes: "No pathologically enlarged or suspicious cervical lymph nodes observed in accessible areas. / Không thấy hạch cổ to bệnh lý hoặc nghi ngờ ở các vùng khảo sát được.",
                // Impression / Kết luận
                impression: "Normal thyroid ultrasound examination. / Kết quả siêu âm tuyến giáp bình thường."
                // recommendation field can be added if needed
            }
        }
    }, // End of Normal Preset (don't forget comma)
    { // Preset 2: Hashimoto
        name: "Hashimoto's Thyroiditis / Viêm Giáp Hashimoto",
        data: {
            thyroid: {
                // General Findings / Tổng quát
                overallSize: "Mildly enlarged / To nhẹ",
                echotexture: "Diffusely heterogeneous, coarsened, with micronodulation pattern (multiple ill-defined hypoechoic areas < 5mm). Fibrous septations may be present. / Không đồng nhất lan tỏa, cấu trúc thô, dạng vi hạt (nhiều vùng giảm âm giới hạn không rõ < 5mm). Có thể thấy các vách xơ.",
                vascularity: "Variable, often normal or increased in early stages, can be decreased later. / Thay đổi, thường bình thường hoặc tăng ở giai đoạn sớm, có thể giảm ở giai đoạn sau.",
                // Right Lobe / Thùy Phải (mm) - Example typical dimensions
                rightLobeD1: "18", rightLobeD2: "20", rightLobeD3: "50",
                rightLobeFindings: "Parenchyma shows diffuse heterogeneous and hypoechoic changes as described above. No discrete suspicious nodule identified. / Mô giáp thay đổi cấu trúc không đồng nhất và giảm âm lan tỏa như mô tả ở trên. Không thấy nhân nghi ngờ khu trú.",
                // Left Lobe / Thùy Trái (mm) - Example typical dimensions
                leftLobeD1: "17", leftLobeD2: "19", leftLobeD3: "48",
                leftLobeFindings: "Parenchyma shows diffuse heterogeneous and hypoechoic changes as described above. No discrete suspicious nodule identified. / Mô giáp thay đổi cấu trúc không đồng nhất và giảm âm lan tỏa như mô tả ở trên. Không thấy nhân nghi ngờ khu trú.",
                // Isthmus / Eo giáp (mm) - Example
                isthmusThickness: "5",
                isthmusFindings: "Thickened and heterogeneous, similar to lobes. / Dày và không đồng nhất, tương tự hai thùy.",
                // Lesions / Tổn thương khu trú
                lesions: [], // Assess any dominant/suspicious nodules separately if present
                // Lymph Nodes / Hạch vùng cổ
                lymphNodes: "May show few small, oval, reactive-appearing lymph nodes in level VI or lateral compartments. / Có thể thấy vài hạch cổ nhỏ, hình bầu dục, dạng phản ứng ở nhóm VI hoặc các nhóm bên.",
                // Impression / Kết luận
                impression: "Findings are consistent with chronic lymphocytic (Hashimoto's) thyroiditis. If any discrete nodules are present, they should be evaluated separately according to ACR TI-RADS criteria. / Hình ảnh phù hợp với bệnh cảnh viêm giáp mãn tính tự miễn (viêm giáp Hashimoto). Nếu có nhân giáp khu trú, cần đánh giá riêng theo tiêu chuẩn ACR TI-RADS."
            }
        }
    }, // End of Hashimoto Preset (don't forget comma)
    { // Preset 3: Graves
        name: "Graves' Disease / Bệnh Basedow (Graves)",
        data: {
            thyroid: {
                // General Findings / Tổng quát
                overallSize: "Moderately to markedly enlarged, often symmetrically. / To vừa đến nhiều, thường đối xứng.",
                echotexture: "Diffusely hypoechoic and relatively homogeneous (compared to Hashimoto's). May appear 'spongy'. / Giảm âm lan tỏa và tương đối đồng nhất (so với Hashimoto). Có thể có dạng 'xốp'.",
                vascularity: "Markedly increased parenchymal vascularity ('Thyroid Inferno') on Color Doppler, with high velocity flow on spectral Doppler (if performed). / Tăng tưới máu nhu mô rõ rệt ('dấu hiệu địa ngục') trên Doppler màu, với dòng chảy vận tốc cao trên Doppler phổ (nếu thực hiện).",
                // Right Lobe / Thùy Phải (mm) - Example typical dimensions
                rightLobeD1: "22", rightLobeD2: "25", rightLobeD3: "55",
                rightLobeFindings: "Enlarged lobe, diffusely hypoechoic parenchyma with marked hypervascularity. No discrete suspicious nodule seen. / Thùy to, mô giáp giảm âm lan tỏa với tăng tưới máu rõ rệt. Không thấy nhân nghi ngờ khu trú.",
                // Left Lobe / Thùy Trái (mm) - Example typical dimensions
                leftLobeD1: "21", leftLobeD2: "24", leftLobeD3: "53",
                leftLobeFindings: "Enlarged lobe, diffusely hypoechoic parenchyma with marked hypervascularity. No discrete suspicious nodule seen. / Thùy to, mô giáp giảm âm lan tỏa với tăng tưới máu rõ rệt. Không thấy nhân nghi ngờ khu trú.",
                // Isthmus / Eo giáp (mm) - Example
                isthmusThickness: "6",
                isthmusFindings: "Enlarged, hypoechoic and hypervascular, similar to lobes. / To, giảm âm và tăng tưới máu, tương tự hai thùy.",
                // Lesions / Tổn thương khu trú
                lesions: [], // Nodules can co-exist but are not the primary feature
                // Lymph Nodes / Hạch vùng cổ
                lymphNodes: "Usually no suspicious lymphadenopathy. May see minimal reactive nodes. / Thường không thấy hạch cổ bệnh lý. Có thể thấy ít hạch viêm phản ứng.",
                // Impression / Kết luận
                impression: "Findings are highly suggestive of Graves' disease (diffuse enlargement, hypoechogenicity, marked hypervascularity). Clinical and laboratory correlation (TSH, FT4, T3, TRAb) is recommended. / Hình ảnh rất gợi ý bệnh Graves (tuyến giáp to lan tỏa, giảm âm, tăng tưới máu rất nhiều). Đề nghị kết hợp lâm sàng và xét nghiệm (TSH, FT4, T3, TRAb)."
            }
        }
    }, // End of Graves Preset (don't forget comma)
    { // Preset 4: MNG (with corrected lesion values)
        name: "Multinodular Goiter (MNG) / Bướu giáp đa nhân",
        data: {
            thyroid: {
                // General Findings / Tổng quát
                overallSize: "Enlarged, often asymmetric / To, thường không đối xứng",
                echotexture: "Heterogeneous background parenchyma, sometimes with underlying chronic thyroiditis features. May show coarse echotexture, fibrosis, or background calcifications. / Cấu trúc nền không đồng nhất, đôi khi có đặc điểm viêm giáp mạn tính kèm theo. Có thể thấy cấu trúc thô, xơ hóa, hoặc vôi hóa nền.",
                vascularity: "Variable, often normal or slightly increased within nodules or background. / Thay đổi, thường bình thường hoặc tăng nhẹ trong các nhân hoặc nhu mô nền.",
                // Right Lobe / Thùy Phải (mm) - Example enlarged dimensions
                rightLobeD1: "25", rightLobeD2: "28", rightLobeD3: "60",
                rightLobeFindings: "Enlarged lobe with heterogeneous background and multiple nodules (described below). / Thùy to, cấu trúc nền không đồng nhất và chứa nhiều nhân (mô tả bên dưới).",
                // Left Lobe / Thùy Trái (mm) - Example enlarged dimensions
                leftLobeD1: "24", leftLobeD2: "26", leftLobeD3: "58",
                leftLobeFindings: "Enlarged lobe with heterogeneous background and multiple nodules (described below). / Thùy to, cấu trúc nền không đồng nhất và chứa nhiều nhân (mô tả bên dưới).",
                // Isthmus / Eo giáp (mm) - Example
                isthmusThickness: "7",
                isthmusFindings: "Thickened, heterogeneous, may contain nodules. / Dày, không đồng nhất, có thể chứa nhân.",

                // Lesions / Tổn thương khu trú - Using numeric string point values matching HTML option values
                lesions: [
                    { // Lesion 1: Larger, Mixed, Benign-appearing
                        lesionLocation: "Right Lobe - Mid-portion / Thùy Phải - Phần giữa", // Location usually text
                        lesionD1: "22", lesionD2: "18", lesionD3: "25", // mm
                        lesionComposition: "1", // "Mixed cystic and solid" -> value="1"
                        lesionEchogenicity: "1", // "Isoechoic" -> value="1"
                        lesionShape: "0", // "Wider-than-tall" -> value="0"
                        lesionMargin: "0", // "Smooth" -> value="0"
                        lesionEchogenicFoci: ["1"], // "Macrocalcifications" & "Peripheral" -> both likely value="1"
                        tiradsScore: "3", // Example calculated score
                        tiradsCategory: "TR3 / Nghi ngờ thấp",
                        tiradsRecommendation: "FNA if ≥ 25 mm, Follow-up if 15-24 mm / FNA nếu ≥ 25 mm, Theo dõi nếu 15-24 mm",
                        lesionDescription: "A relatively large, well-defined nodule (25mm max dimension) located in the mid-right lobe. Composition: Mixed cystic and solid. Echogenicity (solid): Isoechoic. Shape: Wider-than-tall. Margin: Smooth. Echogenic Foci: Macrocalcifications and incomplete peripheral calcification. No other suspicious features identified. ACR TI-RADS Score: 3 (TR3). / Một nhân tương đối lớn, giới hạn rõ (kích thước lớn nhất 25mm) ở giữa thùy phải. Thành phần: Hỗn hợp nang và đặc. Hồi âm (phần đặc): Đồng âm. Hình dạng: Rộng hơn cao. Bờ: Đều. Hồi âm dày: Vôi hóa thô và vôi hóa viền không liên tục. Không thấy đặc điểm nghi ngờ nào khác. Điểm ACR TI-RADS: 3 (TR3)."
                    },
                    { // Lesion 2: Small, Spongiform
                        lesionLocation: "Left Lobe - Lower pole / Thùy Trái - Cực dưới",
                        lesionD1: "8", lesionD2: "5", lesionD3: "7", // mm
                        lesionComposition: "0", // "Spongiform" -> value="0"
                        lesionEchogenicity: "", // N/A
                        lesionShape: "0", // "Wider-than-tall" -> value="0"
                        lesionMargin: "0", // "Smooth" -> value="0"
                        lesionEchogenicFoci: ["0"], // "None or Large comet-tail" -> value="0"
                        tiradsScore: "0",
                        tiradsCategory: "TR1 / Lành tính",
                        tiradsRecommendation: "No FNA / Không FNA",
                        lesionDescription: "Small nodule (8mm) at the left lower pole. Composition: Spongiform (classic appearance of aggregated microcysts). Shape: Wider-than-tall. Margin: Smooth. ACR TI-RADS Score: 0 (TR1). / Nhân nhỏ (8mm) ở cực dưới thùy trái. Thành phần: Dạng bọt biển (hình ảnh điển hình các vi nang kết tụ). Hình dạng: Rộng hơn cao. Bờ: Đều. Điểm ACR TI-RADS: 0 (TR1)."
                    },
                    { // Lesion 3: Solid, Isoechoic, needs follow-up
                        lesionLocation: "Isthmus / Eo giáp",
                        lesionD1: "16", lesionD2: "14", lesionD3: "15", // mm
                        lesionComposition: "2", // "Solid" -> value="2"
                        lesionEchogenicity: "1", // "Isoechoic" -> value="1"
                        lesionShape: "0", // "Wider-than-tall" -> value="0"
                        lesionMargin: "0", // "Smooth" -> value="0"
                        lesionEchogenicFoci: ["0"], // "None" -> value="0"
                        tiradsScore: "3",
                        tiradsCategory: "TR3 / Nghi ngờ thấp",
                        tiradsRecommendation: "FNA if ≥ 25 mm, Follow-up if 15-24 mm / FNA nếu ≥ 25 mm, Theo dõi nếu 15-24 mm",
                        lesionDescription: "Solid nodule measuring 16mm in the isthmus. Echogenicity: Isoechoic. Shape: Round/Oval (Wider-than-tall). Margin: Smooth. No calcifications or other suspicious features are seen. ACR TI-RADS Score: 3 (TR3). Requires follow-up based on size (15-24 mm range). / Nhân đặc kích thước 16mm ở eo giáp. Hồi âm: Đồng âm. Hình dạng: Tròn/Bầu dục (Rộng hơn cao). Bờ: Đều. Không thấy vôi hóa hay đặc điểm nghi ngờ khác. Điểm ACR TI-RADS: 3 (TR3). Cần theo dõi dựa trên kích thước (trong khoảng 15-24 mm)."
                    }
                ], // End of lesions array

                // Lymph Nodes / Hạch vùng cổ
                lymphNodes: "Multiple small, oval lymph nodes with preserved fatty hila seen bilaterally, likely reactive. No pathologically enlarged or suspicious nodes identified. / Thấy nhiều hạch cổ nhỏ, hình bầu dục, còn rốn hạch mỡ ở hai bên, nghĩ nhiều là hạch viêm phản ứng. Không thấy hạch to bệnh lý hoặc nghi ngờ.",
                // Impression / Kết luận
                impression: "Multinodular goiter (MNG) with diffuse thyroid enlargement and multiple nodules of varying appearances as described. Dominant/relevant nodules assessed by ACR TI-RADS (largest TR3, another TR1). No features highly suspicious for malignancy identified in the described nodules. / Bướu giáp đa nhân (MNG) với tuyến giáp to lan tỏa và nhiều nhân có hình thái khác nhau như mô tả. Các nhân trội/liên quan được đánh giá theo ACR TI-RADS (lớn nhất TR3, nhân khác TR1). Không thấy đặc điểm nghi ngờ cao ác tính ở các nhân đã mô tả.",
                // Recommendation / Đề nghị
                recommendation: "Management based on ACR TI-RADS score and size criteria for the most significant nodule(s). Recommend follow-up ultrasound in approx. 12-24 months to assess stability, or sooner if clinically indicated. / Xử trí dựa trên điểm ACR TI-RADS và tiêu chuẩn kích thước cho (các) nhân đáng kể nhất. Đề nghị siêu âm theo dõi trong khoảng 12-24 tháng để đánh giá sự ổn định, hoặc sớm hơn nếu có chỉ định lâm sàng."
            }
        }
    }, // End of MNG Preset (this should be the last one for now)

    // Preset for Benign Colloid Cyst - Add this object to the thyroidPresets array
// Mẫu cho Nang Keo Lành Tính - Thêm object này vào mảng thyroidPresets

{
    name: "Benign Colloid Cyst / Nang keo lành tính",
    data: {
        thyroid: {
            // General Findings / Tổng quát - Assuming normal background / Giả sử nền giáp bình thường
            overallSize: "Normal size / Kích thước bình thường",
            echotexture: "Homogeneous / Đồng nhất",
            vascularity: "Normal / Bình thường",

            // Right Lobe / Thùy Phải (mm) - Normal example
            rightLobeD1: "15", rightLobeD2: "18", rightLobeD3: "45",
            rightLobeFindings: "Normal parenchyma. Single lesion described below. / Mô giáp bình thường. Có một tổn thương mô tả bên dưới.",

            // Left Lobe / Thùy Trái (mm) - Normal example
            leftLobeD1: "14", leftLobeD2: "17", leftLobeD3: "44",
            leftLobeFindings: "Normal parenchyma. No focal lesions. / Mô giáp bình thường. Không có tổn thương khu trú.",

            // Isthmus / Eo giáp (mm) - Normal example
            isthmusThickness: "3",
            isthmusFindings: "Normal thickness and echotexture. / Bề dày và cấu trúc hồi âm bình thường.",

            // Lesions / Tổn thương khu trú - One typical colloid cyst / Một nang keo điển hình
            lesions: [
                { // Lesion 1: Colloid Cyst
                    lesionLocation: "Right Lobe - Lower pole / Thùy Phải - Cực dưới", // Example location
                    lesionD1: "12", // Width / Ngang (mm)
                    lesionD2: "9",  // AP / Trước-Sau (mm)
                    lesionD3: "8",  // Length / Dọc (mm)
                    // --- Use numeric point values (as strings) matching HTML option values ---
                    lesionComposition: "0", // value="0" for "Cystic or almost completely cystic"
                    lesionEchogenicity: "0", // value="0" for "Anechoic"
                    lesionShape: "0", // value="0" for "Wider-than-tall"
                    lesionMargin: "0", // value="0" for "Smooth or Ill-defined"
                    lesionEchogenicFoci: ["0"], // value="0" for "None or Large comet-tail". Presence of comet-tail artifact itself confirms benignity (TR1).
                    // --- TIRADS results ---
                    tiradsScore: "0", // Score is 0 for cystic/spongiform regardless of other features if classic benign
                    tiradsCategory: "TR1 / Lành tính",
                    tiradsRecommendation: "No FNA / Không FNA",
                    // --- Detailed Description ---
                    lesionDescription: "Well-defined, purely cystic (anechoic) nodule measuring 12x9x8 mm, located in the right lower pole. Contains classic echogenic foci demonstrating distinct comet-tail artifacts, confirming benign colloid content. No solid components, septations, or suspicious features identified. ACR TI-RADS Score: 0 (TR1). / Nhân giới hạn rõ, hoàn toàn dạng nang (trống âm), kích thước 12x9x8 mm, ở cực dưới thùy phải. Bên trong có các đốm hồi âm dày điển hình tạo ảnh giả đuôi sao chổi rõ rệt, xác nhận bản chất keo lành tính. Không có thành phần đặc, không vách ngăn, không có đặc điểm nghi ngờ nào khác. Điểm ACR TI-RADS: 0 (TR1)."
                }
            ],

            // Lymph Nodes / Hạch vùng cổ
            lymphNodes: "No suspicious cervical lymph nodes identified. / Không thấy hạch cổ bệnh lý nghi ngờ.",

            // Impression / Kết luận
            impression: "Single benign colloid cyst (TR1) with characteristic comet-tail artifacts in the right lower pole. The remainder of the thyroid gland is unremarkable. / Một nang keo lành tính (TR1) với dấu hiệu đuôi sao chổi đặc trưng ở cực dưới thùy phải. Phần còn lại của tuyến giáp không ghi nhận bất thường.",

            // Recommendation / Đề nghị (optional)
            recommendation: "No specific follow-up required for this benign lesion. / Không cần theo dõi đặc biệt cho tổn thương lành tính này."
        }
    }
},
// Preset for Suspicious Nodule (e.g., Papillary Thyroid Cancer - PTC)
// Mẫu cho Nhân Nghi Ngờ (ví dụ: Ung thư Tuyến Giáp Dạng Nhú - PTC)
// Add this object to the thyroidPresets array / Thêm object này vào mảng thyroidPresets

{
    name: "Suspicious Nodule (e.g., PTC) / Nhân nghi ngờ (ví dụ: K giáp dạng nhú)",
    data: {
        thyroid: {
            // General Findings / Tổng quát - Assuming normal background / Giả sử nền giáp bình thường
            overallSize: "Normal size / Kích thước bình thường",
            echotexture: "Homogeneous / Đồng nhất",
            vascularity: "Normal background vascularity / Tưới máu nền bình thường",

            // Right Lobe / Thùy Phải (mm) - Normal example
            rightLobeD1: "15", rightLobeD2: "18", rightLobeD3: "45",
            rightLobeFindings: "Normal parenchyma. No focal lesions. / Mô giáp bình thường. Không có tổn thương khu trú.",

            // Left Lobe / Thùy Trái (mm) - Normal example
            leftLobeD1: "14", leftLobeD2: "17", leftLobeD3: "44",
            leftLobeFindings: "Normal parenchyma. Contains one suspicious nodule described below. / Mô giáp bình thường. Chứa một nhân nghi ngờ mô tả bên dưới.",

            // Isthmus / Eo giáp (mm) - Normal example
            isthmusThickness: "3",
            isthmusFindings: "Normal thickness and echotexture. / Bề dày và cấu trúc hồi âm bình thường.",

            // Lesions / Tổn thương khu trú - One suspicious nodule / Một nhân nghi ngờ
            lesions: [
                { // Lesion 1: Suspicious Nodule (PTC Example)
                    lesionLocation: "Left Lobe - Mid / Thùy Trái - Giữa", // Example location
                    lesionD1: "8",  // Width / Ngang (mm)
                    lesionD2: "13", // AP / Trước-Sau (mm) - Taller than wide
                    lesionD3: "11", // Length / Dọc (mm)
                    // --- Use numeric point values (as strings) matching HTML option values ---
                    lesionComposition: "2", // value="2" for "Solid or almost completely solid"
                    lesionEchogenicity: "3", // value="3" for "Very hypoechoic"
                    lesionShape: "3", // value="3" for "Taller-than-wide"
                    lesionMargin: "2", // value="2" for "Lobulated or Irregular" (Using Irregular)
                    lesionEchogenicFoci: ["2"], // value="2" for "Punctate echogenic foci (PEF)"
                    // --- TIRADS results ---
                    // Calculated Score: Comp(2)+Echo(3)+Shape(3)+Margin(2)+Foci(3) = 13 points -> TR5
                    tiradsScore: "13",
                    tiradsCategory: "TR5 / Rất nghi ngờ",
                    tiradsRecommendation: "FNA recommended / Đề nghị FNA", // >= 10mm (using max dimension 13mm) and TR5
                    // --- Detailed Description ---
                    lesionDescription: "Located in the mid-left lobe, there is a solid nodule measuring 8x13x11 mm. It demonstrates significant hypoechogenicity (very hypoechoic) compared to the strap muscle. The shape is taller-than-wide. The margins are irregular. Numerous punctate echogenic foci (microcalcifications) are seen throughout the nodule. No cystic changes or macrocalcifications observed. These features (solid, very hypoechoic, taller-than-wide, irregular margins, microcalcifications) are highly suspicious for malignancy. ACR TI-RADS Score: 13 (TR5). / Ở giữa thùy trái có một nhân đặc, kích thước 8x13x11 mm. Nhân giảm âm rất rõ (so với cơ cạnh giáp). Hình dạng cao hơn rộng. Đường bờ không đều. Quan sát thấy nhiều đốm hồi âm dày dạng chấm (vi vôi hóa) khắp nhân. Không thấy thoái hóa nang hay vôi hóa thô. Các đặc điểm này (đặc, rất giảm âm, cao hơn rộng, bờ không đều, vi vôi hóa) là rất nghi ngờ ác tính. Điểm ACR TI-RADS: 13 (TR5)."
                }
            ],

            // Lymph Nodes / Hạch vùng cổ
            lymphNodes: "Careful evaluation for suspicious cervical lymph nodes (e.g., rounded shape, cystic changes, calcifications, loss of fatty hilum) is recommended. No definitively abnormal nodes seen in this example scan. / Đề nghị đánh giá kỹ các hạch cổ để tìm đặc điểm nghi ngờ (ví dụ: hình tròn, thoái hóa nang, vôi hóa, mất rốn hạch mỡ). Chưa thấy hạch bệnh lý rõ ràng trong lần siêu âm ví dụ này.",

            // Impression / Kết luận
            impression: "Single highly suspicious nodule (ACR TI-RADS 5) identified in the left lobe, concerning for malignancy, such as papillary thyroid carcinoma. / Ghi nhận một nhân rất nghi ngờ (ACR TI-RADS 5) ở thùy trái, nghĩ nhiều đến bệnh lý ác tính, ví dụ ung thư tuyến giáp dạng nhú.",

            // Recommendation / Đề nghị
            recommendation: "Fine Needle Aspiration (FNA) of the described left lobe nodule is recommended for cytological diagnosis. Comprehensive evaluation of cervical lymph node compartments is advised. / Đề nghị chọc hút tế bào bằng kim nhỏ (FNA) nhân thùy trái đã mô tả để chẩn đoán tế bào học. Khuyến cáo đánh giá toàn diện các khoang hạch cổ."
        }
    }
},
// Preset for Follicular Neoplasm Pattern
// Mẫu cho Hình ảnh dạng U tuyến nang
// Add this object to the thyroidPresets array / Thêm object này vào mảng thyroidPresets

{
    name: "Follicular Neoplasm Pattern / Hình ảnh dạng U tuyến nang",
    data: {
        thyroid: {
            // General Findings / Tổng quát - Assuming normal background / Giả sử nền giáp bình thường
            overallSize: "Normal size / Kích thước bình thường",
            echotexture: "Homogeneous / Đồng nhất",
            vascularity: "Normal background vascularity / Tưới máu nền bình thường",

            // Right Lobe / Thùy Phải (mm) - Normal example
            rightLobeD1: "16", rightLobeD2: "19", rightLobeD3: "46",
            rightLobeFindings: "Normal parenchyma. Contains one indeterminate nodule described below. / Mô giáp bình thường. Chứa một nhân không xác định mô tả bên dưới.",

            // Left Lobe / Thùy Trái (mm) - Normal example
            leftLobeD1: "15", leftLobeD2: "18", leftLobeD3: "45",
            leftLobeFindings: "Normal parenchyma. No focal lesions. / Mô giáp bình thường. Không có tổn thương khu trú.",

            // Isthmus / Eo giáp (mm) - Normal example
            isthmusThickness: "3",
            isthmusFindings: "Normal thickness and echotexture. / Bề dày và cấu trúc hồi âm bình thường.",

            // Lesions / Tổn thương khu trú - One follicular pattern nodule / Một nhân dạng nang
            lesions: [
                { // Lesion 1: Follicular Neoplasm Pattern Example
                    lesionLocation: "Right Lobe - Upper pole / Thùy Phải - Cực trên", // Example location
                    lesionD1: "20", // Width / Ngang (mm)
                    lesionD2: "18", // AP / Trước-Sau (mm)
                    lesionD3: "25", // Length / Dọc (mm)
                    // --- Use numeric point values (as strings) matching HTML option values ---
                    lesionComposition: "2", // value="2" for "Solid or almost completely solid"
                    lesionEchogenicity: "1", // value="1" for "Hyperechoic or Isoechoic" (Let's use Isoechoic)
                    lesionShape: "0", // value="0" for "Wider-than-tall" (Often round/oval)
                    lesionMargin: "0", // value="0" for "Smooth or Ill-defined" (Often appears smooth)
                    lesionEchogenicFoci: ["0"], // value="0" for "None or Large comet-tail" (Usually no suspicious foci)
                    // --- TIRADS results ---
                    // Calculated Score: Comp(2)+Echo(1)+Shape(0)+Margin(0)+Foci(0) = 3 points -> TR3
                    tiradsScore: "3",
                    tiradsCategory: "TR3 / Nghi ngờ thấp",
                    // Recommendation depends on size and local practice for indeterminate nodules
                    tiradsRecommendation: "FNA recommended (size ≥ 15-20mm often threshold) / Đề nghị FNA (kích thước ≥ 15-20mm thường là ngưỡng)", // Example, size 25mm fits
                    // --- Detailed Description ---
                    lesionDescription: "Located in the right upper pole, there is a solid nodule measuring 20x18x25 mm. It is isoechoic compared to the thyroid parenchyma. The shape is roughly oval (wider-than-tall) and margins are smooth, possibly indicating encapsulation (halo sign may be present but is non-specific). No microcalcifications or other highly suspicious features are identified. While lacking definitive malignant signs, the solid nature makes it indeterminate. Appearance is consistent with a follicular neoplasm pattern. ACR TI-RADS Score: 3 (TR3). FNA is typically considered for indeterminate nodules of this size. / Ở cực trên thùy phải có một nhân đặc, kích thước 20x18x25 mm. Nhân đồng âm so với mô giáp. Hình dạng tương đối bầu dục (rộng hơn cao) và bờ đều, có thể gợi ý có vỏ bao (dấu hiệu halo có thể có nhưng không đặc hiệu). Không thấy vi vôi hóa hay các đặc điểm nghi ngờ cao khác. Mặc dù thiếu dấu hiệu ác tính rõ ràng, bản chất đặc làm cho nhân không xác định được. Hình ảnh phù hợp với dạng u tuyến nang. Điểm ACR TI-RADS: 3 (TR3). FNA thường được cân nhắc cho các nhân không xác định có kích thước này."
                }
            ],

            // Lymph Nodes / Hạch vùng cổ
            lymphNodes: "No suspicious cervical lymph nodes identified. / Không thấy hạch cổ bệnh lý nghi ngờ.",

            // Impression / Kết luận
            impression: "Indeterminate solid nodule (ACR TI-RADS 3) in the right upper pole with features suggestive of a follicular neoplasm pattern. Ultrasound cannot reliably differentiate follicular adenoma (benign) from follicular carcinoma (malignant). / Nhân đặc không xác định (ACR TI-RADS 3) ở cực trên thùy phải với các đặc điểm gợi ý hình ảnh dạng u tuyến nang. Siêu âm không thể phân biệt chắc chắn u tuyến nang lành tính (adenoma) và ung thư (carcinoma).",

            // Recommendation / Đề nghị
            recommendation: "Fine Needle Aspiration (FNA) is recommended for cytological evaluation given the indeterminate nature and size of the nodule. / Chọc hút tế bào bằng kim nhỏ (FNA) được đề nghị để đánh giá tế bào học do bản chất không xác định và kích thước của nhân."
        }
    }
},
// Preset for Subacute Thyroiditis (De Quervain's)
// Mẫu cho Viêm giáp bán cấp (De Quervain's)
// Add this object to the thyroidPresets array / Thêm object này vào mảng thyroidPresets

{
    name: "Subacute Thyroiditis (De Quervain's) / Viêm giáp bán cấp (De Quervain's)",
    data: {
        thyroid: {
            // General Findings / Tổng quát - Often involves part of the gland initially
            overallSize: "Normal or Mildly Enlarged, may be asymmetric / Kích thước bình thường hoặc to nhẹ, có thể không đối xứng",
            // Echotexture shows characteristic inflammatory areas
            echotexture: "Focal or diffuse ill-defined, hypoechoic area(s) within the parenchyma / (Các) vùng giảm âm giới hạn không rõ, khu trú hoặc lan tỏa trong nhu mô",
            // Vascularity is key for diagnosis
            vascularity: "Markedly decreased or absent vascularity ('cold' area) within the affected hypoechoic region(s) on Color Doppler / Giảm rõ rệt hoặc không có tưới máu (vùng 'lạnh') trong (các) vùng giảm âm bị ảnh hưởng trên Doppler màu",

            // Example: Right lobe affected, Left lobe less so / Ví dụ: Thùy phải bị ảnh hưởng, thùy trái ít hơn
            // Right Lobe / Thùy Phải (mm)
            rightLobeD1: "19", // Example - slightly enlarged/swollen
            rightLobeD2: "21",
            rightLobeD3: "52",
            rightLobeFindings: "Contains large, ill-defined hypoechoic area involving the mid and upper pole, demonstrating significantly reduced vascularity. No discrete nodule identified within this area. Correlate with clinical tenderness. / Chứa vùng giảm âm lớn, giới hạn không rõ ở phần giữa và cực trên, cho thấy tưới máu giảm đáng kể. Không thấy nhân khu trú trong vùng này. Kết hợp với dấu hiệu đau lâm sàng.",

            // Left Lobe / Thùy Trái (mm) - Example less affected/normal
            leftLobeD1: "15",
            leftLobeD2: "18",
            leftLobeD3: "45",
            leftLobeFindings: "Appears relatively normal in size and echotexture, with normal vascularity. / Có vẻ bình thường về kích thước, cấu trúc âm và tưới máu.",

            // Isthmus / Eo giáp (mm) - Example normal
            isthmusThickness: "4",
            isthmusFindings: "Normal appearance. / Hình thái bình thường.",

            // Lesions / Tổn thương khu trú - Typically none in classic subacute thyroiditis
            lesions: [], // Should be empty / Nên để trống

            // Lymph Nodes / Hạch vùng cổ
            lymphNodes: "May show mildly enlarged, elongated, reactive-appearing cervical lymph nodes. No clearly suspicious nodes. / Có thể thấy vài hạch cổ hơi lớn, hình dài, dạng phản ứng. Không có hạch nghi ngờ rõ ràng.",

            // Impression / Kết luận
            impression: "Findings are highly suggestive of subacute (granulomatous / De Quervain's) thyroiditis, predominantly affecting the right lobe as described (ill-defined hypoechoic areas with markedly decreased vascularity). Clinical correlation (neck pain, fever, inflammatory markers like ESR/CRP, thyroid function tests) is essential. / Hình ảnh rất gợi ý viêm giáp bán cấp (viêm giáp u hạt / De Quervain's), chủ yếu ảnh hưởng thùy phải như mô tả (vùng giảm âm giới hạn không rõ, tưới máu giảm rõ rệt). Kết hợp lâm sàng (đau cổ, sốt, chỉ số viêm như ESR/CRP, xét nghiệm chức năng giáp) là cần thiết.",

            // Recommendation / Đề nghị
            recommendation: "Usually self-limiting or medically managed (NSAIDs/steroids). Ultrasound follow-up in several weeks to months can be performed to monitor resolution of inflammatory changes. / Thường tự giới hạn hoặc điều trị nội khoa (NSAID/steroid). Siêu âm theo dõi sau vài tuần đến vài tháng có thể được thực hiện để đánh giá sự hồi phục của các thay đổi viêm."
        }
    }
},
// Preset for Simple Thyroid Cyst
// Mẫu cho Nang giáp đơn thuần
{
    name: "Simple Thyroid Cyst / Nang giáp đơn thuần",
    data: {
        thyroid: {
            // General Findings - Assuming normal background
            overallSize: "Normal size / Kích thước bình thường",
            echotexture: "Homogeneous / Đồng nhất",
            vascularity: "Normal / Bình thường",

            // Lobes & Isthmus (mm) - Normal examples
            rightLobeD1: "15", rightLobeD2: "18", rightLobeD3: "45",
            rightLobeFindings: "Normal parenchyma. / Mô giáp bình thường.",
            leftLobeD1: "14", leftLobeD2: "17", leftLobeD3: "44",
            leftLobeFindings: "Normal parenchyma. Contains one simple cyst described below. / Mô giáp bình thường. Chứa một nang đơn thuần mô tả bên dưới.",
            isthmusThickness: "3",
            isthmusFindings: "Normal appearance. / Hình thái bình thường.",

            // Lesions - One simple cyst
            lesions: [
                { // Lesion 1: Simple Cyst
                    lesionLocation: "Left Lobe - Mid / Thùy Trái - Giữa", // Example location
                    lesionD1: "10", // Width (mm)
                    lesionD2: "8",  // AP (mm)
                    lesionD3: "7",  // Length (mm)
                    // --- Use numeric point values (as strings) ---
                    lesionComposition: "0", // value="0" for "Cystic..."
                    lesionEchogenicity: "0", // value="0" for "Anechoic"
                    lesionShape: "0", // value="0" for "Wider-than-tall"
                    lesionMargin: "0", // value="0" for "Smooth..."
                    lesionEchogenicFoci: ["0"], // value="0" for "None..."
                    // --- TIRADS results ---
                    tiradsScore: "0",
                    tiradsCategory: "TR1 / Lành tính",
                    tiradsRecommendation: "No FNA / Không FNA",
                    // --- Detailed Description ---
                    lesionDescription: "Well-defined, purely cystic lesion measuring 10x8x7 mm in the mid-left lobe. It is completely anechoic with posterior acoustic enhancement and thin, smooth walls. No septations, solid components, internal vascularity, or suspicious features identified. Classic appearance of a simple cyst. ACR TI-RADS Score: 0 (TR1). / Tổn thương giới hạn rõ, hoàn toàn dạng nang ở giữa thùy trái, kích thước 10x8x7 mm. Hoàn toàn trống âm, có tăng âm phía sau, thành mỏng và đều. Không thấy vách ngăn, thành phần đặc, tưới máu bên trong hay đặc điểm nghi ngờ nào khác. Hình ảnh điển hình của nang đơn thuần. Điểm ACR TI-RADS: 0 (TR1)."
                }
            ],

            // Lymph Nodes
            lymphNodes: "No suspicious cervical lymph nodes. / Không thấy hạch cổ bệnh lý.",

            // Impression
            impression: "Single simple cyst (TR1) in the left lobe. Remainder of the thyroid gland is unremarkable. / Một nang đơn thuần (TR1) ở thùy trái. Phần còn lại của tuyến giáp không có bất thường.",

            // Recommendation
            recommendation: "No follow-up required for this simple cyst. / Không cần theo dõi đối với nang đơn thuần này."
        }
    }
}, // <-- Nhớ thêm dấu phẩy nếu có thêm preset sau đây
// Preset for Spongiform Nodule
// Mẫu cho Nhân giáp dạng bọt biển
{
    name: "Spongiform Nodule / Nhân giáp dạng bọt biển",
    data: {
        thyroid: {
            // General Findings - Assuming normal background
            overallSize: "Normal size / Kích thước bình thường",
            echotexture: "Homogeneous / Đồng nhất",
            vascularity: "Normal / Bình thường",

            // Lobes & Isthmus (mm) - Normal examples
            rightLobeD1: "16", rightLobeD2: "17", rightLobeD3: "47",
            rightLobeFindings: "Normal parenchyma. Contains one spongiform nodule described below. / Mô giáp bình thường. Chứa một nhân dạng bọt biển mô tả bên dưới.",
            leftLobeD1: "15", leftLobeD2: "18", leftLobeD3: "46",
            leftLobeFindings: "Normal parenchyma. No focal lesions. / Mô giáp bình thường. Không có tổn thương khu trú.",
            isthmusThickness: "4",
            isthmusFindings: "Normal appearance. / Hình thái bình thường.",

            // Lesions - One spongiform nodule
            lesions: [
                { // Lesion 1: Spongiform Nodule
                    lesionLocation: "Right Lobe - Isthmus Junction / Thùy Phải - Vị trí nối Eo giáp", // Example location
                    lesionD1: "14", // Width (mm)
                    lesionD2: "11", // AP (mm)
                    lesionD3: "10", // Length (mm)
                    // --- Use numeric point values (as strings) ---
                    lesionComposition: "0", // value="0" for "Spongiform"
                    lesionEchogenicity: "", // N/A - Not scored when spongiform
                    lesionShape: "0", // value="0" for "Wider-than-tall" (or shape irrelevant if spongiform)
                    lesionMargin: "0", // value="0" for "Smooth or Ill-defined"
                    lesionEchogenicFoci: ["0"], // value="0" for "None..."
                    // --- TIRADS results ---
                    tiradsScore: "0", // Spongiform morphology automatically assigns 0 points
                    tiradsCategory: "TR1 / Lành tính",
                    tiradsRecommendation: "No FNA / Không FNA",
                    // --- Detailed Description ---
                    lesionDescription: "Well-defined nodule measuring 14x11x10 mm, located at the junction of the right lobe and isthmus. The nodule is composed almost entirely (>50%) of aggregated microcystic spaces (<1mm), consistent with a classic spongiform appearance. No discernible solid components or suspicious features. ACR TI-RADS Score: 0 (TR1). / Nhân giới hạn rõ, kích thước 14x11x10 mm, ở vị trí nối thùy phải và eo giáp. Nhân cấu tạo gần như hoàn toàn (>50%) bởi các khoang vi nang (<1mm) kết tụ lại, phù hợp với hình ảnh dạng bọt biển điển hình. Không có thành phần đặc hay đặc điểm nghi ngờ nào có thể phân biệt được. Điểm ACR TI-RADS: 0 (TR1)."
                }
            ],

            // Lymph Nodes
            lymphNodes: "No suspicious cervical lymph nodes. / Không thấy hạch cổ bệnh lý.",

            // Impression
            impression: "Single spongiform nodule (TR1) in the right lobe/isthmus junction, a definitively benign finding. Remainder of the thyroid gland is unremarkable. / Một nhân dạng bọt biển (TR1) ở vị trí nối thùy phải/eo giáp, là một dấu hiệu lành tính chắc chắn. Phần còn lại của tuyến giáp không có bất thường.",

            // Recommendation
            recommendation: "No follow-up required for this spongiform nodule. / Không cần theo dõi đối với nhân dạng bọt biển này."
        }
    }
}, // <-- Nhớ thêm dấu phẩy nếu có thêm preset sau đây
// Preset for Simple Diffuse Goiter
// Mẫu cho Bướu giáp lan tỏa đơn thuần
{
    name: "Simple Diffuse Goiter / Bướu giáp lan tỏa đơn thuần",
    data: {
        thyroid: {
            // General Findings
            overallSize: "Diffusely enlarged, relatively symmetric / To lan tỏa, tương đối đối xứng",
            echotexture: "Homogeneous or minimally heterogeneous, without features of thyroiditis / Đồng nhất hoặc không đồng nhất rất ít, không có đặc điểm của viêm giáp",
            vascularity: "Normal or mildly increased, non-specific pattern / Bình thường hoặc tăng nhẹ, kiểu không đặc hiệu",

            // Lobes & Isthmus (mm) - Example enlarged dimensions
            rightLobeD1: "20", rightLobeD2: "22", rightLobeD3: "55",
            rightLobeFindings: "Enlarged lobe with generally preserved homogeneous echotexture. No discrete nodules identified. / Thùy to, cấu trúc âm nhìn chung đồng nhất được bảo tồn. Không thấy nhân khu trú rõ ràng.",
            leftLobeD1: "19", leftLobeD2: "21", leftLobeD3: "54",
            leftLobeFindings: "Enlarged lobe with generally preserved homogeneous echotexture. No discrete nodules identified. / Thùy to, cấu trúc âm nhìn chung đồng nhất được bảo tồn. Không thấy nhân khu trú rõ ràng.",
            isthmusThickness: "5", // Slightly thickened example
            isthmusFindings: "Mildly thickened but maintains normal echotexture. / Hơi dày nhưng giữ được cấu trúc âm bình thường.",

            // Lesions - Typically none or incidental small ones
            lesions: [], // Empty array - characteristic is diffuse enlargement without significant nodules

            // Lymph Nodes
            lymphNodes: "No suspicious cervical lymph nodes. / Không thấy hạch cổ bệnh lý.",

            // Impression
            impression: "Diffusely enlarged thyroid gland (goiter) with relatively homogeneous echotexture and normal/mildly increased vascularity. No features suggestive of autoimmune thyroiditis (Hashimoto's/Graves') or significant nodularity identified. Findings consistent with simple diffuse goiter. / Tuyến giáp to lan tỏa (bướu cổ) với cấu trúc âm tương đối đồng nhất và tưới máu bình thường/tăng nhẹ. Không thấy các đặc điểm gợi ý bệnh tuyến giáp tự miễn (Hashimoto/Graves) hay các nốt đáng kể. Hình ảnh phù hợp với bướu giáp lan tỏa đơn thuần.",

            // Recommendation
            recommendation: "Clinical correlation (TSH, symptoms of compression if any) is recommended. Follow-up interval based on clinical assessment. / Đề nghị kết hợp lâm sàng (TSH, triệu chứng chèn ép nếu có). Khoảng thời gian theo dõi dựa trên đánh giá lâm sàng."
        }
    }
} // <-- Dấu phẩy KHÔNG cần thiết nếu đây là preset cuối cùng trong mảng
]; // End of thyroidPresets array

console.log("thyroid-presets.js loaded with corrected MNG lesion values.");

// js/organs/thyroid/thyroid-report.js
// Optional: Contains highly specific or complex report formatting logic
// for the thyroid, separated from thyroid-module.js if needed.

/**
 * Example of a more complex formatting function if needed.
 * @param {object} thyroidData - The collected thyroid data.
 * @returns {string} - A highly customized report section.
 */
export function formatThyroidReportAdvanced(thyroidData) {
    console.log("Using advanced thyroid report formatting (Placeholder).");

    // Could involve more detailed sentence construction, comparison to priors (if data available), etc.
    let reportSection = `ADVANCED THYROID REPORT SECTION (Placeholder)\n`;
    reportSection += ` Gland size: ${thyroidData.overallSize || 'N/A'}. Echotexture: ${thyroidData.echotexture || 'N/A'}.\n`;
    // ... add more complex logic here ...

    if (thyroidData.lesions && thyroidData.lesions.length > 0) {
        reportSection += `\n Discrete Lesions:\n`;
        thyroidData.lesions.forEach((lesion, i) => {
             reportSection += `   - Lesion ${i+1} (${lesion.lesionLocation || 'Unknown location'}): ${lesion.lesionD1 || '?'}mm, TI-RADS ${lesion.tiradsCategory || '?'}.\n`;
        });
    } else {
        reportSection += ` No discrete lesions identified.\n`;
    }

    return reportSection;
}

console.log("Thyroid-specific report formatting module loaded (Placeholder).");


// js/organs/thyroid/thyroid-ui.js
// Optional: Contains complex UI interaction logic specific to the thyroid module,
// separated from the main thyroid-module.js for clarity if needed.

// Example: Could handle complex animations, drag-and-drop for lesions, etc.

export function setupAdvancedThyroidUI() {
    console.log("Setting up advanced Thyroid UI interactions (Placeholder).");
    // Add specific UI logic here if thyroid-module.js becomes too large.
}

console.log("Thyroid UI module loaded (Placeholder).");











